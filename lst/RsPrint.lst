     1                                  ;====================MACRO=======================
     2                                  
     3                                  ;------------------MultiPush---------------------
     4                                  
     5                                  %macro multipush 1-* 
     6                                                                          ; >= 1 args
     7                                      %rep %0                             
     8                                                                          ; %0 == number of args
     9                                          push %1                         ; push first arg
    10                                          %rotate 1                       ; now second arg is first
    11                                  
    12                                      %endrep 
    13                                  
    14                                  %endmacro
    15                                  
    16                                  ;-------------------MultiPop---------------------
    17                                  
    18                                  %macro multipop 1-* 
    19                                                                          ; >= 1 args
    20                                      %rep %0 
    21                                                                          ; %0 == number of args
    22                                          %rotate -1                      ; previous arg is current
    23                                          pop %1                          ; pop arg
    24                                  
    25                                      %endrep 
    26                                  
    27                                  %endmacro
    28                                  
    29                                  ;------------------------------------------------
    30                                  
    31                                  ;====================PRINTF======================
    32                                  
    33                                  ; 'Printf' assembler function made for
    34                                  ;                         Linux x86_64
    35                                  ;
    36                                  ; File consists unit tests for functions
    37                                  ; Includes STRLIB library
    38                                  
    39                                  ; %s - '0'-terminated string
    40                                  ; %c - symbol
    41                                  ; %d - decimal
    42                                  ; %x - hexidecimal
    43                                  ; %o - octagonal
    44                                  ; %b - binary
    45                                  
    46                                  ;   b   c   d   o   s   x
    47                                  ;   1d  2d  3d  14d 18d 23d
    48                                  ;   62h 63h 64h 6Fh 73h 78h
    49                                  
    50                                  ;================================================
    51                                  
    52                                  %define EOL     0                       
    53                                                                          ; end of line 
    54                                  %define WRITE   1
    55                                                                          ; 'write' syscall code 
    56                                  
    57                                  %define STDOUT  1                       
    58                                                                          ; stdout fd 
    59                                  
    60                                  %define BufSize 10d                     
    61                                                                          ; size of buffer for RsPrint
    62                                  
    63                                  %define RealBufSize BufSize + 64            
    64                                                                          ; real size of PrintBuf
    65                                  
    66                                  ;================================================
    67                                  
    68                                  %ifndef rsPrint
    69                                  %define rsPrint
    70                                  
    71                                  ;================================================
    72                                  
    73                                  section .text
    74                                  
    75                                  ;================================================
    76                                  
    77                                  global RsPrint
    78                                  global RsPrintC:function
    79                                  
    80                                  extern RsItoa,RsItoa2n
    81                                  extern printf 
    82                                  
    83                                  ;==================FUNCTIONS=====================
    84                                  
    85                                  ;-------------------RsPrintC---------------------
    86                                  ;
    87                                  ; Descr: RsPrint shell for C ( according to 
    88                                  ;                             Calling Convention)
    89                                  ; Entry: RDI, RSI, RDX, RCX, R8, R9 - first six 
    90                                  ;        arguments
    91                                  ;        Other - in stack
    92                                  ;
    93                                  ; Exit : RAX == exit code 
    94                                  ;
    95                                  ; Destr: works according to calling convention 
    96                                  ;------------------------------------------------
    97                                  
    98                                  RsPrintC:
    99 00000000 58                              pop rax                         ; pop return ip from stack
   100 00000001 48890425[00000000]              mov [RetAddr], rax              ; store it in variable 
   101                                  
   102                                          multipush r9, r8, rcx, rdx, rsi, rdi 
   102                              <1> 
   102                              <1>  %rep %0
   102                              <1> 
   102                              <1>  push %1
   102                              <1>  %rotate 1
   102                              <1> 
   102                              <1>  %endrep
   102                              <2> 
   102 00000009 4151                <2>  push %1
   102                              <2>  %rotate 1
   102                              <2> 
   102                              <2> 
   102 0000000B 4150                <2>  push %1
   102                              <2>  %rotate 1
   102                              <2> 
   102                              <2> 
   102 0000000D 51                  <2>  push %1
   102                              <2>  %rotate 1
   102                              <2> 
   102                              <2> 
   102 0000000E 52                  <2>  push %1
   102                              <2>  %rotate 1
   102                              <2> 
   102                              <2> 
   102 0000000F 56                  <2>  push %1
   102                              <2>  %rotate 1
   102                              <2> 
   102                              <2> 
   102 00000010 57                  <2>  push %1
   102                              <2>  %rotate 1
   102                              <2> 
   102                              <1> 
   103                                                                          ; push first 6 args
   104                                  
   105 00000011 E818000000                      call RsPrint
   106                                  
   107                                          multipop  r9, r8, rcx, rdx, rsi, rdi 
   107                              <1> 
   107                              <1>  %rep %0
   107                              <1> 
   107                              <1>  %rotate -1
   107                              <1>  pop %1
   107                              <1> 
   107                              <1>  %endrep
   107                              <2> 
   107                              <2>  %rotate -1
   107 00000016 5F                  <2>  pop %1
   107                              <2> 
   107                              <2> 
   107                              <2>  %rotate -1
   107 00000017 5E                  <2>  pop %1
   107                              <2> 
   107                              <2> 
   107                              <2>  %rotate -1
   107 00000018 5A                  <2>  pop %1
   107                              <2> 
   107                              <2> 
   107                              <2>  %rotate -1
   107 00000019 59                  <2>  pop %1
   107                              <2> 
   107                              <2> 
   107                              <2>  %rotate -1
   107 0000001A 4158                <2>  pop %1
   107                              <2> 
   107                              <2> 
   107                              <2>  %rotate -1
   107 0000001C 4159                <2>  pop %1
   107                              <2> 
   107                              <1> 
   108                                                                          ; pop args 
   109                                  
   110                                          ;push qword [RetAddr]            ; push return addr
   111                                          
   112 0000001E 4831C0                          xor rax, rax                    ; number of float parameters 
   113 00000021 E8(00000000)                    call printf 
   114                                  
   115 00000026 FF3425[00000000]                push qword [RetAddr]            ; push return addr
   116                                  
   117 0000002D C3                              ret
   118                                  
   119                                  ;-------------------RsPrint----------------------
   120                                  ;
   121                                  ; Descr: Prints string in terminal
   122                                  ; Entry: Gains arguments in stack (CDECL)
   123                                  ;        First arg  - format string
   124                                  ;        Next  args - arguments for format string
   125                                  ; Exit : None
   126                                  ;
   127                                  ; Desrt: R8, RAX, RCX, R11, RDX, RSI, RDI, R9, R10
   128                                  ;
   129                                  ; Saves: RBX
   130                                  ;-------------------------------------------------
   131                                  
   132                                  RsPrint:
   133 0000002E 55                                  push rbp
   134 0000002F 4889E5                              mov rbp, rsp                ; make stack frame
   135                                  
   136 00000032 53                                  push rbx                    ; save rbx 
   137                                  
   138 00000033 488B7510                            mov rsi, [rbp + 16]         ; rbp -> start of format string
   139 00000037 4C8D5518                            lea r10, [rbp + 24]         ; r10 -> first argument
   140                                  
   141 0000003B 4831D2                              xor rdx, rdx                ; counter of symbols
   142 0000003E 4D31C9                              xor r9, r9                  ; counter in PrintBuf
   143                                  
   144                                          .loop:
   145 00000041 803C1600                            cmp byte [rsi + rdx], EOL   ; if there EOL
   146 00000045 741D                                je .fin
   147                                  
   148 00000047 803C1625                            cmp byte [rsi + rdx], '%'   ; if there specifier
   149 0000004B 7405                                je .write
   150                                  
   151 0000004D 48FFC2                              inc rdx                     ; to next symbol
   152 00000050 EBEF                                jmp .loop
   153                                  
   154                                          .write:
   155 00000052 4883FA00                            cmp rdx, 0                  ; if counter == 0
   156 00000056 7405                                je .arg                     ; no need to write
   157                                  
   158 00000058 E8A3010000                          call WriteInBuf             ; write symbols from format 
   159                                                                          ; string in buffer
   160                                  
   161                                          .arg:
   162 0000005D E81B000000                          call PrintArg               ; print argument
   163 00000062 EBDD                                jmp .loop
   164                                  
   165                                          .fin:
   166 00000064 4883FA00                            cmp rdx, 0                  ; if counter == 0
   167 00000068 7405                                je .flushcheck              ; no need to write
   168                                                                          ; but buffer can be not empty
   169 0000006A E891010000                          call WriteInBuf
   170                                  
   171                                          .flushcheck:
   172 0000006F 4983F900                            cmp r9, 0                   ; is buffer empty
   173 00000073 7405                                je .ret                     ; jmp to ret if it is 
   174                                  
   175 00000075 E8B6010000                          call FlushBuf               ; final flush of buffer 
   176                                                                          ; if it is not empty
   177                                          .ret:
   178 0000007A 5B                                  pop rbx                     ; restore rbx value 
   179 0000007B 5D                                  pop rbp                     ; restore rbp value
   180 0000007C C3                                  ret
   181                                  
   182                                  ;-------------------PrintArg----------------------
   183                                  ;
   184                                  ; Descr: Prints in terminal argument in the way
   185                                  ;        according to specifier
   186                                  ;
   187                                  ; Entry: RSI + RDX -> %
   188                                  ;        r10 -> next arg to be printed
   189                                  ;        RAX == 1 (write)
   190                                  ;        RDI == 1 (stdout)
   191                                  ;
   192                                  ; Exit : RDX == 0
   193                                  ;        RSI -> next symb after specifier
   194                                  ;        r10 -> next argument in stack (+8)
   195                                  ;        R9 == number of symbols in buffer
   196                                  ;
   197                                  ; Destr: R8, RAX, RBX, RCX, R11, RDI
   198                                  ;------------------------------------------------
   199                                  
   200                                  PrintArg:
   201 0000007D 56                                  push rsi                    ; save current pos in format string
   202                                  
   203 0000007E 4C0FB64601                          movzx r8, byte [rsi + 1]
   204                                                                          ; get next symbol after '%'
   205                                  
   206 00000083 4983F825                            cmp r8, '%'
   207 00000087 7510                                jne .nodblpercent           ; '%%' case
   208                                  
   209 00000089 41C681[08000000]25                  mov byte [PrintBuf + r9], '%'
   210 00000091 49FFC1                              inc r9                      ; store one '%' in buffer
   211 00000094 E90A010000                          jmp .fin                    ; and jump to return
   212                                  
   213                                          .nodblpercent:
   214 00000099 4983E862                            sub r8, 'b'                 ; r8 = offset of the symbol
   215                                                                          ; from 'b' in ASCII table
   216                                  
   217 0000009D 4983F877                            cmp r8, 'x' - 1             ; if specifier is not recognized
   218 000000A1 0F87F2000000                        ja .casedefault             ; print two symbol incuding '%'
   219                                  
   220 000000A7 4E8B04C5[B2000000]                  mov r8, [.jmptable + r8 * 8]
   221 000000AF 41FFE0                              jmp r8                      ; else jmp using table
   222                                  
   223                                          .jmptable:
   224 000000B2 [6A01000000000000]                  dq .binary                  ; %b
   225 000000BA [8B01000000000000]                  dq .char                    ; %c
   226 000000C2 [7F01000000000000]                  dq .decimal                 ; %d
   227                                  
   228 000000CA [9901000000000000]-                 times 'n' - 'd' dq .casedefault
   228 000000CA <rept>             
   229                                  
   230 0000011A [7101000000000000]                  dq .octagonal               ; %o
   231                                  
   232 00000122 [9901000000000000]-                 times 'r' - 'o' dq .casedefault
   232 00000122 <rept>             
   233                                  
   234 0000013A [9201000000000000]                  dq .string                  ; %s
   235                                  
   236 00000142 [9901000000000000]-                 times 'w' - 's' dq .casedefault
   236 00000142 <rept>             
   237                                  
   238 00000162 [7801000000000000]                  dq .hexadecimal             ; %x
   239                                  
   240                                          .binary:
   241 0000016A B901000000                          mov rcx, 1
   242 0000016F EB13                                jmp .casenum
   243                                  
   244                                          .octagonal:
   245 00000171 B903000000                          mov rcx, 3
   246 00000176 EB0C                                jmp .casenum
   247                                  
   248                                          .hexadecimal:
   249 00000178 B904000000                          mov rcx, 4
   250 0000017D EB05                                jmp .casenum
   251                                  
   252                                          .decimal:
   253 0000017F B90A000000                          mov rcx, 10
   254                                              
   255                                          .casenum:
   256 00000184 E823000000                          call PrintArgNum
   257 00000189 EB18                                jmp .fin 
   258                                  
   259                                          .char:
   260 0000018B E85E000000                          call PrintArgChar
   261 00000190 EB11                                jmp .fin
   262                                  
   263                                          .string:
   264 00000192 E844000000                          call PrintArgStr
   265 00000197 EB0A                                jmp .fin
   266                                  
   267                                          .casedefault:
   268 00000199 BA02000000                          mov rdx, 2                  ; store two symbols in buffer
   269 0000019E E85D000000                          call WriteInBuf             ; '%' and next after it 
   270                                  
   271                                          .fin:
   272 000001A3 4831D2                              xor rdx, rdx                ; counter = 0
   273 000001A6 5E                                  pop rsi                     ; restore rsi value
   274 000001A7 4883C602                            add rsi, 2                  ; rsi -> next sym after specifier
   275                                  
   276 000001AB C3                                  ret
   277                                  
   278                                  ;-------------------PrintArgNum------------------
   279                                  ;
   280                                  ; Descr: writes %d, %b, %o or %x argument
   281                                  ;
   282                                  ; Entry: RCX = 10 for %d of 1,3 and 4 for
   283                                  ;        %b, %o and %x
   284                                  ;        r10 -> current argument in stack
   285                                  ;        R9  -> counter of symbols in buffer
   286                                  ;
   287                                  ; Exit:  r10 -> next arg (+8)
   288                                  ;        R9  = R9 + number of printed symbols
   289                                  ;
   290                                  ; Destr: RSI, RAX, RDX, RBX, r11, RDI 
   291                                  ;------------------------------------------------
   292                                  
   293                                  PrintArgNum:
   294 000001AC 498DB1[08000000]                    lea rsi, [PrintBuf + r9]    ; write in PrintBuf
   295 000001B3 498B1A                              mov rbx, [r10]              ; get argument value
   296                                  
   297 000001B6 4883F90A                            cmp rcx, 10
   298 000001BA 7412                                je .decimal                 ; jmp if  %d (rcx == 10 )
   299                                  
   300 000001BC BA01000000                          mov rdx, 1
   301 000001C1 48D3E2                              shl rdx, cl                 ; counting mask for Itoa2n
   302 000001C4 48FFCA                              dec rdx                     ; rdx = 2^n - 1 (mask)
   303                                  
   304 000001C7 E8(00000000)                        call RsItoa2n               ; get string in buffer
   305                                                                          ; rsi remains its value
   306 000001CC EB05                                jmp .skip                   ; rdi still equals 1
   307                                  
   308                                          .decimal:
   309 000001CE E8(00000000)                        call RsItoa                 ; call Itoa for 10-numeric system
   310                                  
   311                                          .skip:
   312 000001D3 4D01C1                              add r9, r8                  ; increment counter in buffer
   313 000001D6 4983C208                            add r10, 8                  ; r10 -> next argument
   314                                  
   315 000001DA C3                                  ret
   316                                  
   317                                  ;-------------------PrintArgStr------------------
   318                                  ;
   319                                  ; Descr: Writes string argument
   320                                  ;
   321                                  ; Entry: r10 -> current arguments ( address of string)
   322                                  ;
   323                                  ; Exit : r10 -> next argument (+8)
   324                                  ;
   325                                  ; Destr: RDX, RAX, RSI, RCX, RDI 
   326                                  ;------------------------------------------------
   327                                  
   328                                  PrintArgStr:
   329 000001DB 498B32                              mov rsi, [r10]              ; rsi -> argument string
   330                                              
   331 000001DE 4831D2                              xor rdx, rdx 
   332 000001E1 48F7DA                              neg rdx                     ; rdx = maximum value
   333                                  
   334 000001E4 E817000000                          call WriteInBuf             ; store argument in buffer
   335                                  
   336 000001E9 4983C208                            add r10, 8                  ; r10 -> next arg
   337                                  
   338 000001ED C3                                  ret
   339                                  
   340                                  ;-------------------PrintArgChar-----------------
   341                                  ;
   342                                  ; Descr: Writes char argument in terminal
   343                                  ;
   344                                  ; Entry: r10 -> current argument
   345                                  ;        R9 - counter of symbols in buffer
   346                                  ;
   347                                  ; Exit:  r10 -> next argument (+8)
   348                                  ;        R9 += 1
   349                                  ;
   350                                  ; Destr: RDX
   351                                  ;------------------------------------------------
   352                                  
   353                                  PrintArgChar:
   354 000001EE 418A12                              mov dl, [r10]
   355 000001F1 418891[08000000]                    mov [PrintBuf + r9], dl     ; store arg in buffer
   356                                  
   357 000001F8 49FFC1                              inc r9                     ; inc counter in buffer
   358 000001FB 4983C208                            add r10, 8                  ; r10 -> next argument
   359                                  
   360 000001FF C3                                  ret
   361                                  
   362                                  ;------------------WriteInBuf--------------------
   363                                  ;
   364                                  ; Descr: copies RDX bytes from RSI to PrintBuf
   365                                  ;
   366                                  ; Note: stops copying if *src == \0
   367                                  ;
   368                                  ; Entry: RDX == number of symbols to be written
   369                                  ;        RSI -> source 
   370                                  ;
   371                                  ; Exit : RSI = RSI + RDX (number of symbols 
   372                                  ;                         written in buffer)
   373                                  ;        R9  = number of symbols in buffer
   374                                  ;
   375                                  ; Destr: RCX, RDX, RDI 
   376                                  ;------------------------------------------------
   377                                  
   378                                  WriteInBuf:
   379 00000200 4889D1                          mov rcx, rdx                    ; rcx = counter of symbols to be moved
   380                                                                          ; to buffer 
   381 00000203 4983F90A                        cmp r9, BufSize
   382 00000207 7605                            jbe .loop                       ; flush buffer if it is full
   383                                                                          ; else skip 
   384 00000209 E822000000                      call FlushBuf                              
   385                                  
   386                                      .loop:
   387 0000020E 8A16                            mov dl, byte [rsi]              ; get one byte from src 
   388                                  
   389 00000210 80FA00                          cmp dl, 0
   390 00000213 741A                            je .ret                         ; stop if *src == \0
   391                                  
   392 00000215 418891[08000000]                mov byte [PrintBuf + r9], dl    ; store byte in PrintBuf 
   393                                  
   394 0000021C 48FFC6                          inc rsi                         ; iterate to next symbol
   395                                  
   396 0000021F 49FFC1                          inc r9                          ; increment counter in buffer
   397 00000222 4983F90A                        cmp r9, BufSize
   398 00000226 7205                            jb .noflush                     ; no flush if buffer is not full
   399                                  
   400 00000228 E803000000                      call FlushBuf                   ; else flush buffer
   401                                  
   402                                      .noflush: 
   403 0000022D E2DF                            loop .loop                      ; repeat rcx times
   404                                  
   405                                      .ret:
   406 0000022F C3                              ret 
   407                                  
   408                                  ;-------------------FlushBuf---------------------
   409                                  ;
   410                                  ; Descr: flushes bytes from PrintBuf to terminal
   411                                  ;        using 'write' 01h syscall
   412                                  ;
   413                                  ; Entry: R9 -> counter of symbols in buffer
   414                                  ;
   415                                  ; Exit : R9 == 0
   416                                  ;        RAX == number of symbols printed 
   417                                  ;
   418                                  ; Destr: RDI, RDX 
   419                                  ;------------------------------------------------
   420                                  
   421                                  FlushBuf:
   422 00000230 56                              push rsi                        ; save position in source
   423 00000231 51                              push rcx                        ; being corrupted by syscall
   424                                  
   425 00000232 B801000000                      mov rax, WRITE                  ; 'write' syscall
   426 00000237 4C89CA                          mov rdx, r9                     ; rdx = number of symbols 
   427 0000023A BF01000000                      mov rdi, STDOUT                 ; to stdout 
   428                                  
   429 0000023F 488D3425[08000000]              lea rsi, [PrintBuf]             ; from PrintBuf
   430                                  
   431 00000247 0F05                            syscall                         ; call 'write'
   432                                  
   433 00000249 4D31C9                          xor r9, r9                      ; PrintBuf is now empty
   434                                  
   435 0000024C 59                              pop rcx 
   436 0000024D 5E                              pop rsi                         ; restore rsi and rcx values
   437                                  
   438 0000024E C3                              ret                            
   439                                  
   440                                  ;------------------------------------------------
   441                                  
   442                                  [section .bss]
   443                                  
   444 00000000 <res 00000008>          RetAddr:  resq 1                        ; Return Address for RsPrintC  
   445                                  
   446 00000008 <res 0000004A>          PrintBuf: resb RealBufSize              ; buffer for RsPrint
   447                                  
   448                                  __SECT__
   449                                  
   450                                  ;================================================
   451                                  
   452                                  %endif
