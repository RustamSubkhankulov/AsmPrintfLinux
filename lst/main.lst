     1                                  ;================================================
     2                                  ;                         (c) Rustam4ik, 2029 - 7
     3                                  ;================================================
     4                                  
     5                                  section .text 
     6                                  
     7                                  ;====================Macro=======================
     8                                  
     9                                  ;-------------------.EXIT------------------------
    10                                  
    11                                  %macro      .EXIT 0                 
    12                                                                          ; terminates programm
    13                                              xor rdi, rdi                ; exit code 0
    14                                              mov rax, 03Ch               ; exit
    15                                              syscall                 
    16                                  %endmacro
    17                                  
    18                                  ;------------------------------------------------
    19                                  
    20                                  ;-------------------.PAUSE-----------------------
    21                                  
    22                                  %macro      .PAUSE 0 
    23                                                                          ; getchar();
    24                                  		    nop
    25                                  		    xor rax, rax                ; read
    26                                  
    27                                  		    mov rdi, 0                  ; stdin - first arg
    28                                              mov rsi, PauseBuf
    29                                                                          ; char* buf - second arg
    30                                              mov rdx, 1                  ; read one byte
    31                                  
    32                                              syscall                     ; call read         
    33                                              
    34                                  		    nop
    35                                  %endmacro
    36                                  
    37                                  ;------------------------------------------------
    38                                  
    39                                  section .data 
    40                                  
    41 00000000 00                      PauseBuf    db 0                        ; reads one symb
    42                                  
    43                                  section .text
    44                                  
    45                                  ;------------------------------------------------
    46                                  
    47                                  ;==================Includes======================
    48                                  
    49                                  %include    "RsPrint.s"                      
     1                              <1> ;====================PRINTF======================
     2                              <1> 
     3                              <1> ; 'Printf' assembler function made for 
     4                              <1> ;                         Linux x86_64
     5                              <1> ;
     6                              <1> ; File consists unit tests for functions
     7                              <1> ; Includes STRLIB library 
     8                              <1> 
     9                              <1> ; %s - '0'-terminated string
    10                              <1> ; %c - symbol
    11                              <1> ; %d - decimal
    12                              <1> ; %x - hexidecimal
    13                              <1> ; %o - octagonal
    14                              <1> ; %b - binary
    15                              <1> 
    16                              <1> ;   b   c   d   o   s   x
    17                              <1> ;   2d  2d  3d  14d 18d 23d
    18                              <1> ;   62h 63h 64h 6Fh 73h 78h
    19                              <1> 
    20                              <1> ;================================================
    21                              <1> 
    22                              <1> %ifndef rsPrint
    23                              <1> %define rsPrint 
    24                              <1> 
    25                              <1> ;================================================
    26                              <1> 
    27                              <1> section .text 
    28                              <1> 
    29                              <1> ;==================FUNCTIONS=====================
    30                              <1> 
    31                              <1> ;-------------------RsPrint----------------------
    32                              <1> ;
    33                              <1> ; Descr: Prints string in terminal
    34                              <1> ; Entry: Gains arguments in stack (CDECL)
    35                              <1> ;        First arg  - format string
    36                              <1> ;        Next  args - arguments for format string
    37                              <1> ; Exit : None
    38                              <1> ; Desrt: a lot
    39                              <1> ;-------------------------------------------------
    40                              <1> 
    41                              <1> RsPrint:     
    42 00000000 55                  <1>             push rbp
    43 00000001 4889E5              <1>             mov rbp, rsp                ; make stack frame
    44                              <1> 
    45 00000004 488B7510            <1>             mov rsi, [rbp + 16]         ; rbp -> start of format string
    46 00000008 488D5D18            <1>             lea rbx, [rbp + 24]         ; rbx -> first argument
    47                              <1> 
    48 0000000C 4831D2              <1>             xor rdx, rdx                ; counter of symbols 
    49                              <1> 
    50 0000000F BF01000000          <1>             mov rdi, 01h                ; stdout
    51                              <1> 
    52                              <1>         .loop:
    53 00000014 803C1600            <1>             cmp byte [rsi + rdx], 0     ; if there EOL
    54 00000018 741F                <1>             je .fin
    55                              <1> 
    56 0000001A 803C1625            <1>             cmp byte [rsi + rdx], '%'   ; if there specifier
    57 0000001E 7405                <1>             je .write 
    58                              <1> 
    59 00000020 48FFC2              <1>             inc rdx                     ; to next symbol
    60 00000023 EBEF                <1>             jmp .loop 
    61                              <1> 
    62                              <1>         .write:  
    63 00000025 4883FA00            <1>             cmp rdx, 0                  ; if counter == 0
    64 00000029 7407                <1>             je .arg                     ; no need to write
    65                              <1> 
    66 0000002B B801000000          <1>             mov rax, 01h                ; 'write' syscall code
    67 00000030 0F05                <1>             syscall                     ; else write
    68                              <1> 
    69                              <1>         .arg:
    70 00000032 E811000000          <1>             call RsPrintArg             ; print argument
    71 00000037 EBDB                <1>             jmp .loop 
    72                              <1> 
    73                              <1>         .fin:
    74 00000039 4883FA00            <1>             cmp rdx, 0                  ; if counter == 0
    75 0000003D 7407                <1>             je .ret                     ; no need to write 
    76                              <1> 
    77 0000003F B801000000          <1>             mov rax, 01h                ; 'write' syscall code
    78 00000044 0F05                <1>             syscall                     ; else write
    79                              <1> 
    80                              <1>         .ret: 
    81 00000046 5D                  <1>             pop rbp                     ; restore rbp value
    82 00000047 C3                  <1>             ret 
    83                              <1> 
    84                              <1> ;------------------RsPrintArg---------------------
    85                              <1> ;
    86                              <1> ; Descr: Prints in terminal argument in the way
    87                              <1> ;        according to specifier
    88                              <1> ;
    89                              <1> ; Entry: RSI + RDX -> % 
    90                              <1> ;        RBX -> next arg to be printed
    91                              <1> ;        RAX == 1 (write)
    92                              <1> ;        RDI == 1 (stdout)
    93                              <1> ;
    94                              <1> ; Exit : RDX == 0
    95                              <1> ;        RSI -> next symb after specifier
    96                              <1> ;
    97                              <1> ; Destr:
    98                              <1> ;------------------------------------------------
    99                              <1> 
   100                              <1> RsPrintArg:  
   101 00000048 4801D6              <1>             add rsi, rdx                ; move rsi -> %    
   102                              <1> 
   103 0000004B 4C0FB64601          <1>             movzx r8, byte [rsi + 1]    
   104                              <1>                                         ; get next symbol after '%'
   105                              <1> 
   106 00000050 4983F825            <1>             cmp r8, '%'
   107 00000054 7511                <1>             jne .nodblpercent
   108                              <1> 
   109 00000056 B801000000          <1>             mov rax, 01d                ; 'write' syscall 
   110 0000005B BA01000000          <1>             mov rdx, 01d                ; print one symb
   111                              <1> 
   112 00000060 0F05                <1>             syscall                     ; 'write' one %
   113                              <1> 
   114 00000062 E90E010000          <1>             jmp .fin 
   115                              <1> 
   116                              <1>         .nodblpercent:
   117 00000067 4983E862            <1>             sub r8, 'b'                 ; r8 = offset of the symbol
   118                              <1>                                         ; from 'b' in ASCII table
   119                              <1> 
   120 0000006B 4983F877            <1>             cmp r8, 'x' - 1             ; if specifier is not recognized
   121 0000006F 0F87F4000000        <1>             ja .casedefault             ; print two symbol incuding '%'
   122                              <1> 
   123 00000075 4E8B04C5[80000000]  <1>             mov r8, [.jmptable + r8 * 8]
   124 0000007D 41FFE0              <1>             jmp r8                      ; else jmp using table
   125                              <1> 
   126                              <1>         .jmptable: 
   127 00000080 [3801000000000000]  <1>             dq .binary                  ; %b
   128 00000088 [5401000000000000]  <1>             dq .char                    ; 1
   129 00000090 [4D01000000000000]  <1>             dq .decimal                 ; 2
   130 00000098 [6901000000000000]  <1>             dq .casedefault             ; 3
   131 000000A0 [6901000000000000]  <1>             dq .casedefault             ; 4
   132 000000A8 [6901000000000000]  <1>             dq .casedefault             ; 5
   133 000000B0 [6901000000000000]  <1>             dq .casedefault             ; 6
   134 000000B8 [6901000000000000]  <1>             dq .casedefault             ; 7
   135 000000C0 [6901000000000000]  <1>             dq .casedefault             ; 8
   136 000000C8 [6901000000000000]  <1>             dq .casedefault             ; 9
   137 000000D0 [6901000000000000]  <1>             dq .casedefault             ; 10
   138 000000D8 [6901000000000000]  <1>             dq .casedefault             ; 11
   139 000000E0 [6901000000000000]  <1>             dq .casedefault             ; 12
   140 000000E8 [3F01000000000000]  <1>             dq .octagonal               ; %o
   141 000000F0 [6901000000000000]  <1>             dq .casedefault             ; 14
   142 000000F8 [6901000000000000]  <1>             dq .casedefault             ; 15
   143 00000100 [6901000000000000]  <1>             dq .casedefault             ; 16
   144 00000108 [5B01000000000000]  <1>             dq .string                  ; %s
   145 00000110 [6901000000000000]  <1>             dq .casedefault             ; 18
   146 00000118 [6901000000000000]  <1>             dq .casedefault             ; 19
   147 00000120 [6901000000000000]  <1>             dq .casedefault             ; 20
   148 00000128 [6901000000000000]  <1>             dq .casedefault             ; 21
   149 00000130 [4601000000000000]  <1>             dq .hexadecimal             ; %x
   150                              <1> 
   151                              <1>         .binary:
   152 00000138 B901000000          <1>             mov rcx, 1
   153 0000013D EB23                <1>             jmp .case2n
   154                              <1> 
   155                              <1>         .octagonal:
   156 0000013F B903000000          <1>             mov rcx, 3
   157 00000144 EB1C                <1>             jmp .case2n
   158                              <1> 
   159                              <1>         .hexadecimal:
   160 00000146 B904000000          <1>             mov rcx, 4
   161 0000014B EB15                <1>             jmp .case2n
   162                              <1> 
   163                              <1>         .decimal:
   164 0000014D E82B000000          <1>             call RsPrintArgDec
   165 00000152 EB21                <1>             jmp .fin
   166                              <1> 
   167                              <1>         .char: 
   168 00000154 E88A000000          <1>             call RsPrintArgChar
   169 00000159 EB1A                <1>             jmp .fin 
   170                              <1> 
   171                              <1>         .string:
   172 0000015B E86A000000          <1>             call RsPrintArgStr
   173 00000160 EB13                <1>             jmp .fin
   174                              <1> 
   175                              <1>         .case2n:
   176 00000162 E83A000000          <1>             call RsPrintArg2n
   177 00000167 EB0C                <1>             jmp .fin 
   178                              <1> 
   179                              <1>         .casedefault:
   180 00000169 BA02000000          <1>             mov rdx, 2                  ; write "%%"
   181 0000016E B801000000          <1>             mov rax, 01d                ; 'write' syscall 
   182 00000173 0F05                <1>             syscall 
   183                              <1> 
   184                              <1>         .fin: 
   185 00000175 4831D2              <1>             xor rdx, rdx                ; counter = 0
   186 00000178 4883C602            <1>             add rsi, 2                  ; rsi -> next sym after specifier
   187                              <1>             
   188 0000017C C3                  <1>             ret 
   189                              <1> 
   190                              <1> ;------------------RsPrintArgDec-----------------
   191                              <1> ;
   192                              <1> ; Descr: Prints number in decimal numeric system
   193                              <1> ;
   194                              <1> ; Entry: RBX -> arguments
   195                              <1> ;        RDI == 1 (stdout)
   196                              <1> ;
   197                              <1> ; Exit : RBX -> next arguments (+8)
   198                              <1> ;
   199                              <1> ; Destr: 
   200                              <1> ;------------------------------------------------
   201                              <1> 
   202                              <1> RsPrintArgDec:
   203                              <1> 
   204 0000017D 56                  <1>             push rsi
   205 0000017E 53                  <1>             push rbx                    ; saving current position in format string
   206                              <1>                                         ; no need to save rdx
   207                              <1>                                         ; save current argument position in stack (rbx) 
   208                              <1> 
   209 0000017F 488D3425[00000000]  <1>             lea rsi, [PrintArgBuf]      ; buffer for string
   210 00000187 41B90A000000        <1>             mov r9, 10d                 ; base of numeric system
   211 0000018D 488B1B              <1>             mov rbx, [rbx]              ; get argument value
   212                              <1> 
   213 00000190 E879000000          <1>             call RsItoa                 ; now R8 = number of symbols in string 
   214                              <1>                                         ; rsi remains it value 
   215                              <1>                                         ; rdi still equals 1
   216                              <1> 
   217 00000195 E869000000          <1>             call RsWriteStr             ; call 'write'
   218                              <1> 
   219 0000019A 5B                  <1>             pop rbx 
   220 0000019B 5E                  <1>             pop rsi                     ; restore values
   221 0000019C 4883C308            <1>             add rbx, 8                  ; rbx -> next argument
   222                              <1> 
   223 000001A0 C3                  <1>             ret 
   224                              <1> 
   225                              <1> ;------------------RsPrintArg2n------------------
   226                              <1> ;
   227                              <1> ; Descr: Print argument in numeric system with 
   228                              <1> ;        base, that is a power of 2 (2 ^n)
   229                              <1> ;
   230                              <1> ; Entry: RCX == n
   231                              <1> ;        RBX -> current argument
   232                              <1> ;        RDI == 1(stdout)
   233                              <1> ; Exit : RBX -> next argument (+8)
   234                              <1> ;
   235                              <1> ; Destr: RDX
   236                              <1> ;------------------------------------------------
   237                              <1> 
   238                              <1> RsPrintArg2n:
   239 000001A1 56                  <1>             push rsi
   240 000001A2 53                  <1>             push rbx                    ; saving current position in format string
   241                              <1>                                         ; no need to save rdx
   242                              <1>                                         ; save current argument position in stack (rbx) 
   243                              <1> 
   244 000001A3 488D3425[00000000]  <1>             lea rsi, [PrintArgBuf]      ; buffer for string
   245 000001AB 488B1B              <1>             mov rbx, [rbx]              ; get argument value
   246                              <1> 
   247 000001AE BA01000000          <1>             mov rdx, 1
   248 000001B3 48D3E2              <1>             shl rdx, cl
   249 000001B6 48FFCA              <1>             dec rdx                     ; rdx = 2^n - 1 (mask)
   250                              <1> 
   251 000001B9 E88A000000          <1>             call RsItoa2n               ; get string in buffer
   252                              <1>                                         ; rsi remains its value
   253                              <1>                                         ; rdi still equals 1
   254                              <1> 
   255 000001BE E840000000          <1>             call RsWriteStr             ; call 'write'
   256                              <1> 
   257 000001C3 5B                  <1>             pop rbx 
   258 000001C4 5E                  <1>             pop rsi                     ; restore values
   259 000001C5 4883C308            <1>             add rbx, 8                  ; rbx -> next argument
   260                              <1> 
   261 000001C9 C3                  <1>             ret 
   262                              <1> 
   263                              <1> ;------------------RsPrintArgStr-----------------
   264                              <1> ;
   265                              <1> ; Descr: Writes string argument
   266                              <1> ;
   267                              <1> ; Entry: RDI == 1
   268                              <1> ;        RBX -> current arguments ( address of string)
   269                              <1> ;
   270                              <1> ; Exit : RBX -> next argument (+8)
   271                              <1> ;
   272                              <1> ; Destr: RDX 
   273                              <1> ;------------------------------------------------
   274                              <1> 
   275                              <1> RsPrintArgStr:
   276 000001CA 56                  <1>             push rsi                    ; saving current position in format string
   277                              <1>                                         ; no need to save rdx
   278                              <1> 
   279 000001CB 488B33              <1>             mov rsi, [rbx]              ; rsi -> argument string
   280 000001CE E8AD000000          <1>             call RsStrlen               ; rcx = lenght of string
   281                              <1> 
   282 000001D3 4889CA              <1>             mov rdx, rcx                ; rdx = number of symbols
   283 000001D6 B801000000          <1>             mov rax, 01d                ; now: rax == 1, rdi == 1
   284                              <1> 
   285 000001DB 0F05                <1>             syscall                     ; call 'write'
   286                              <1> 
   287 000001DD 5E                  <1>             pop rsi                     ; restore value
   288 000001DE 4883C308            <1>             add rbx, 8
   289                              <1> 
   290 000001E2 C3                  <1>             ret 
   291                              <1> 
   292                              <1> ;------------------RsPrintArgChar----------------
   293                              <1> ;
   294                              <1> ; Descr: Writes char argument in terminal
   295                              <1> ;
   296                              <1> ; Entry: RDI == 1
   297                              <1> ;        RBX -> current  argument
   298                              <1> ;
   299                              <1> ; Exit:  RBX -> next argument (+8)
   300                              <1> ;
   301                              <1> ; Destr: RDX
   302                              <1> ;------------------------------------------------
   303                              <1> 
   304                              <1> RsPrintArgChar:
   305 000001E3 56                  <1>             push rsi                    ; saving current position in format string
   306                              <1>                                         ; no need to save rdx
   307                              <1> 
   308 000001E4 41B801000000        <1>             mov r8, 01d                 ; one symbol
   309 000001EA 488D3425[00000000]  <1>             lea rsi, [PrintArgBuf]      ; buffer for argument
   310                              <1> 
   311 000001F2 488B13              <1>             mov rdx, [rbx]              ; get argument
   312 000001F5 488916              <1>             mov [rsi], rdx              ; store char in buffer
   313                              <1> 
   314 000001F8 E806000000          <1>             call RsWriteStr             ; call 'write'
   315                              <1> 
   316 000001FD 5E                  <1>             pop rsi 
   317 000001FE 4883C308            <1>             add rbx, 8                  ; rbx -> next argument
   318                              <1> 
   319 00000202 C3                  <1>             ret 
   320                              <1>             
   321                              <1> 
   322                              <1> ;-------------------RsWriteStr-------------------
   323                              <1> ;
   324                              <1> ; Descr: writes particular number of symbols in 
   325                              <1> ;        terminal using 'write' Linux system call 
   326                              <1> ;
   327                              <1> ; Entry: R8 - number of synbols to be printed
   328                              <1> ;        RSI - start of the string
   329                              <1> ;        RDI == 1 (stdout)
   330                              <1> ;
   331                              <1> ; Exit:  RAX == 1
   332                              <1> ;
   333                              <1> ; Destr: RDX
   334                              <1> ;------------------------------------------------
   335                              <1> 
   336                              <1> RsWriteStr:
   337                              <1> 
   338 00000203 4C89C2              <1>         mov rdx, r8                     ; rdx = number of symbols
   339 00000206 B801000000          <1>         mov rax, 01d                    ; 'write' syscall
   340                              <1> 
   341 0000020B 0F05                <1>         syscall                         ; call write
   342                              <1> 
   343 0000020D C3                  <1>         ret 
   344                              <1> 
   345                              <1> ;------------------------------------------------
   346                              <1> 
   347                              <1> section .bss  
   348                              <1> 
   349 00000000 <res 00000040>      <1> PrintArgBuf: resb 64                 ; buffer used for itoa
   350                              <1> 
   351                              <1> ;================================================
   352                              <1> 
   353                              <1> %endif
    50                                                                          ; printf function
    51                                  %include    "RsItoa.s"           
     1                              <1> %ifndef rsItoa
     2                              <1> %define rsItoa 
     3                              <1> 
     4                              <1> ;================================================
     5                              <1> 
     6                              <1> section .text 
     7                              <1> 
     8                              <1> ;==================FUNCTIONS=====================
     9                              <1> 
    10                              <1> ;-------------------MyItoa-------------------------
    11                              <1> ;
    12                              <1> ; Descr: translates number to string of symbols
    13                              <1> ;
    14                              <1> ; Exit : RSI remains its value
    15                              <1> ;        R8 - number of symbols in string
    16                              <1> ;
    17                              <1> ; Entry: RSI - start of the string
    18                              <1> ;        R9 - base of numeric system 
    19                              <1> ;        RBX - number to be translated
    20                              <1> ;
    21                              <1> ; Destr: RAX, RDX
    22                              <1> ;------------------------------------------------
    23                              <1> 
    24                              <1> RsItoa:
    25 0000020E 4889D8              <1>         mov rax, rbx                    ; get value for
    26                              <1>                                         ; counting offset
    27 00000211 41B801000000        <1>         mov r8, 1                       ; at least ine symb in string
    28                              <1> 
    29                              <1>     .CountOffset:
    30 00000217 4831D2              <1>         xor rdx, rdx                    ; rdx:rax / op64 = rax, rdx = remainder 
    31 0000021A 49F7F1              <1>         div r9                          ; div by base
    32                              <1> 
    33 0000021D 4883F800            <1>         cmp rax, 0                      ; cmp result with 0
    34 00000221 7408                <1>         je .main                        ; if equal, jmp to main 
    35 00000223 49FFC0              <1>         inc r8                          ; increment addition counter
    36 00000226 48FFC6              <1>         inc rsi                         ; move to next symbol
    37                              <1> 
    38 00000229 EBEC                <1>         jmp .CountOffset
    39                              <1> 
    40                              <1>     .main:
    41 0000022B 4889D8              <1>         mov rax, rbx                    ; get value again
    42 0000022E 4C89C1              <1>         mov rcx, r8                     ; get number of symbols
    43                              <1> 
    44                              <1>     .loop:
    45 00000231 4831D2              <1>         xor rdx, rdx                    ; for division
    46 00000234 49F7F1              <1>         div r9                          ; divide by base 
    47                              <1> 
    48 00000237 8A92[01000000]      <1>         mov dl, [rdx + XlatTable64]     ; converting symbol
    49                              <1> 
    50 0000023D 8816                <1>         mov [rsi], dl                   ; place symbol in string
    51 0000023F 48FFCE              <1>         dec rsi                         ; iterate to next one
    52                              <1> 
    53 00000242 E2ED                <1>         loop .loop                      ; repeat rcx times
    54                              <1> 
    55 00000244 48FFC6              <1>         inc rsi                         ; di point to the start of string
    56 00000247 C3                  <1>         ret 
    57                              <1> 
    58                              <1> ;--------------------RsItoa2n--------------------
    59                              <1> ;
    60                              <1> ; Descr: optimized version of the itoa64, made for
    61                              <1> ;        numeric sytems with base - power of two
    62                              <1> ;
    63                              <1> ; Entry: RBX - number to be translated
    64                              <1> ;        RCX  - n
    65                              <1> ;        RDX - mask for division (2^n - 1)
    66                              <1> ;        RSI - start of the string
    67                              <1> ;
    68                              <1> ; Exit : RSI remains its value
    69                              <1> ;        R8 - number of symbols in string
    70                              <1> ;
    71                              <1> ; Destr: RAX, RBX
    72                              <1> ;------------------------------------------------
    73                              <1> 
    74                              <1> RsItoa2n:
    75                              <1> 
    76 00000248 4889D8              <1>         mov rax, rbx                    ; get value for
    77                              <1>                                         ; counting offset
    78 0000024B 41B801000000        <1>         mov r8, 1                       ; at least ine symb in string
    79                              <1> 
    80                              <1>     .CountOffset:
    81 00000251 48D3E8              <1>         shr rax, cl 
    82 00000254 4883F800            <1>         cmp rax, 0
    83 00000258 7408                <1>         je .loop 
    84                              <1> 
    85 0000025A 49FFC0              <1>         inc r8                          ; increment addition counter
    86 0000025D 48FFC6              <1>         inc rsi                         ; move to next symbol
    87                              <1> 
    88 00000260 EBEF                <1>         jmp .CountOffset
    89                              <1> 
    90                              <1>     .loop:
    91 00000262 4889D8              <1>         mov rax, rbx                    ; get value 
    92 00000265 4821D0              <1>         and rax, rdx                    ; use mask
    93                              <1> 
    94 00000268 8A80[01000000]      <1>         mov al, [rax + XlatTable64]     ; translate code
    95 0000026E 8806                <1>         mov [rsi], al                   ; store in sting
    96 00000270 48FFCE              <1>         dec rsi                         ; iterate to next
    97                              <1> 
    98 00000273 48D3EB              <1>         shr rbx, cl                   ; ax /= 2^base
    99                              <1> 
   100 00000276 4883FB00            <1>         cmp rbx, 0                      
   101 0000027A 75E6                <1>         jne .loop                       ; while (rax != 0)
   102                              <1> 
   103 0000027C 48FFC6              <1>         inc rsi                         ; rdi -> start of the string
   104 0000027F C3                  <1>         ret 
   105                              <1> 
   106                              <1> ;------------------------------------------------
   107                              <1> 
   108                              <1> section .data 
   109                              <1> 
   110 00000001 303132333435363738- <1> XlatTable64 db "0123456789ABCDEF"       ; translation table
   110 0000000A 39414243444546      <1>
   111                              <1> 
   112                              <1> ;================================================
   113                              <1> 
   114                              <1> %endif
    52                                                                          ; itoa function
    53                                  
    54                                  %include    "RsStrlen.s"                     
     1                              <1> %ifndef rsStrlen
     2                              <1> %define rsStrlen 
     3                              <1> 
     4                              <1> ;================================================
     5                              <1> 
     6                              <1> section .text 
     7                              <1> 
     8                              <1> ;===================FUNCTIONS====================
     9                              <1> 
    10                              <1> ;--------------------Strlen----------------------
    11                              <1> ;
    12                              <1> ; Descr:   count lenght of the null-terimanted 
    13                              <1> ;                                       string
    14                              <1> ; Entry:   RSI - address of the string
    15                              <1> ;
    16                              <1> ; Exit:    RCX - lenght of the string
    17                              <1> ;
    18                              <1> ; Desrt:   none
    19                              <1> ;-------------------------------------------------
    20                              <1> 
    21                              <1> RsStrlen:    
    22 00000280 56                  <1>             push rsi                    ; save rsi value
    23                              <1> 
    24 00000281 4831C9              <1>             xor rcx, rcx
    25 00000284 48F7D9              <1>             neg rcx                     ; rcx == 0xFFFFFFFFFFFFFFFF
    26                              <1>             
    27                              <1>         .loop:
    28 00000287 803E00              <1>             cmp byte [rsi], 0
    29 0000028A 7405                <1>             je .ret                     ; if ([rdi] == 0) stop
    30                              <1> 
    31 0000028C 48FFC6              <1>             inc rsi                     ; iterate to next symb
    32 0000028F E2F6                <1>             loop .loop                  ; while ([di] != 0)
    33                              <1> 
    34                              <1>         .ret: 
    35                              <1>             ;add rcx, 2                   ; get lenght of the string
    36 00000291 48F7D9              <1>             neg rcx      
    37                              <1> 
    38 00000294 5E                  <1>             pop rsi                     ; restore rsi value 
    39                              <1> 
    40 00000295 C3                  <1>             ret 
    41                              <1> 
    42                              <1> ;================================================
    43                              <1> 
    44                              <1> %endif
    55                                                                          ; strlen function
    56                                  
    57                                  %include    "PrintUnitTests.s"                  
     1                              <1> %ifndef rsPrintUnitTests
     2                              <1> %define rsPrintUnitTests
     3                              <1> 
     4                              <1> ;================================================
     5                              <1> 
     6                              <1> section .text 
     7                              <1> 
     8                              <1> ;=================FUNCTIONS======================
     9                              <1> 
    10                              <1> ;----------------CharUnitTest--------------------
    11                              <1> ;
    12                              <1> ; Descr: tests '%c' specifier
    13                              <1> ;
    14                              <1> ; Entry: none
    15                              <1> ;
    16                              <1> ; Exit : none
    17                              <1> ;
    18                              <1> ; Destr: 
    19                              <1> ;------------------------------------------------
    20                              <1> 
    21                              <1> CharUnitTest:
    22                              <1> 
    23 00000296 6A21                <1>         push '!'
    24 00000298 68[4B000000]        <1>         push CharFormatStr              ; push arguments
    25                              <1> 
    26 0000029D E85EFDFFFF          <1>         call RsPrint
    27                              <1> 
    28 000002A2 4883C410            <1>         add rsp, 16                     
    29                              <1> 
    30 000002A6 C3                  <1>         ret 
    31                              <1> 
    32                              <1> ;-----------------StrUnitTest--------------------
    33                              <1> ;
    34                              <1> ; Descr: tests '%s' specifier
    35                              <1> ;
    36                              <1> ; Entry: none
    37                              <1> ;
    38                              <1> ; Exit : none
    39                              <1> ;
    40                              <1> ; Destr:
    41                              <1> ;------------------------------------------------
    42                              <1> 
    43                              <1> StrUnitTest:
    44                              <1> 
    45 000002A7 68[11000000]        <1>         push StrArgument
    46 000002AC 68[71000000]        <1>         push StrFormatStr
    47                              <1> 
    48 000002B1 E84AFDFFFF          <1>         call RsPrint
    49                              <1> 
    50 000002B6 4883C410            <1>         add rsp, 16
    51                              <1> 
    52 000002BA C3                  <1>         ret 
    53                              <1> 
    54                              <1> section .data 
    55                              <1> 
    56 00000011 52757374616D00      <1> StrArgument db "Rustam", 0
    57                              <1> 
    58                              <1> section .text 
    59                              <1> 
    60                              <1> ;-----------------DecUnitTest--------------------
    61                              <1> ;
    62                              <1> ; Descr: tests '%d' specifier
    63                              <1> ;
    64                              <1> ; Entry: none
    65                              <1> ;
    66                              <1> ; Exit : none
    67                              <1> ;
    68                              <1> ; Destr:
    69                              <1> ;------------------------------------------------
    70                              <1> 
    71                              <1> DecUnitTest:
    72                              <1> 
    73 000002BB 68E8040000          <1>         push 1256d
    74 000002C0 68[B6000000]        <1>         push DecFormatStr
    75                              <1> 
    76 000002C5 E836FDFFFF          <1>         call RsPrint
    77                              <1> 
    78 000002CA 4883C410            <1>         add rsp, 16 
    79                              <1> 
    80 000002CE C3                  <1>         ret 
    81                              <1> 
    82                              <1> ;-----------------OctUnitTest--------------------
    83                              <1> ;
    84                              <1> ; Descr: tests '%o' specifier
    85                              <1> ;
    86                              <1> ; Entry: none
    87                              <1> ;
    88                              <1> ; Exit : none
    89                              <1> ;
    90                              <1> ; Destr:
    91                              <1> ;------------------------------------------------
    92                              <1> 
    93                              <1> OctUnitTest:
    94                              <1> 
    95 000002CF 6A18                <1>         push 24d
    96 000002D1 68[D5000000]        <1>         push OctFormatStr
    97                              <1> 
    98 000002D6 E825FDFFFF          <1>         call RsPrint
    99                              <1> 
   100 000002DB 4883C410            <1>         add rsp, 16
   101                              <1>         
   102 000002DF C3                  <1>         ret
   103                              <1> ;-----------------HexUnitTest--------------------
   104                              <1> ;
   105                              <1> ; Descr: tests '%x' specifier
   106                              <1> ;
   107                              <1> ; Entry: none
   108                              <1> ;
   109                              <1> ; Exit : none
   110                              <1> ;
   111                              <1> ; Destr:
   112                              <1> ;------------------------------------------------
   113                              <1> 
   114                              <1> HexUnitTest:
   115                              <1> 
   116 000002E0 685AF22500          <1>         push 25f25Ah
   117 000002E5 68[F2000000]        <1>         push HexFormatStr
   118                              <1>         
   119 000002EA E811FDFFFF          <1>         call RsPrint
   120                              <1> 
   121 000002EF 4883C410            <1>         add rsp, 16
   122                              <1> 
   123 000002F3 C3                  <1>         ret 
   124                              <1> ;-----------------BinUnitTest--------------------
   125                              <1> ;
   126                              <1> ; Descr: tests '%b' specifier
   127                              <1> ;
   128                              <1> ; Entry: none
   129                              <1> ;
   130                              <1> ; Exit : none
   131                              <1> ;
   132                              <1> ; Destr:
   133                              <1> ;------------------------------------------------
   134                              <1> 
   135                              <1> BinUnitTest:
   136                              <1> 
   137 000002F4 6A5B                <1>         push 1011011b
   138 000002F6 68[94000000]        <1>         push BinFormatStr
   139                              <1> 
   140 000002FB E800FDFFFF          <1>         call RsPrint
   141                              <1> 
   142 00000300 4883C410            <1>         add rsp, 16
   143                              <1> 
   144 00000304 C3                  <1>         ret 
   145                              <1> 
   146                              <1> ;-----------------PercUnitTest-------------------
   147                              <1> ;
   148                              <1> ; Descr: tests '%%' specifier
   149                              <1> ;
   150                              <1> ; Entry: none
   151                              <1> ;
   152                              <1> ; Exit : none 
   153                              <1> ;
   154                              <1> ; Destr:
   155                              <1> ;------------------------------------------------
   156                              <1> 
   157                              <1> PercUnitTest:
   158                              <1> 
   159 00000305 68[18000000]        <1>         push PercFormatStr
   160                              <1> 
   161 0000030A E8F1FCFFFF          <1>         call RsPrint
   162                              <1> 
   163 0000030F 4883C408            <1>         add rsp, 8
   164                              <1> 
   165 00000313 C3                  <1>         ret 
   166                              <1> 
   167                              <1> ;-----------------DefUnitTest--------------------
   168                              <1> ;
   169                              <1> ; Descr: tests default case ( %f, %1 and etc)
   170                              <1> ;
   171                              <1> ; Entry: none
   172                              <1> ;
   173                              <1> ; Exit : none 
   174                              <1> ;
   175                              <1> ; Destr:
   176                              <1> ;------------------------------------------------
   177                              <1> 
   178                              <1> DefUnitTest:
   179                              <1> 
   180 00000314 68[2B000000]        <1>         push DefFormatStr
   181                              <1> 
   182 00000319 E8E2FCFFFF          <1>         call RsPrint
   183                              <1> 
   184 0000031E 6683C408            <1>         add sp, 8
   185                              <1> 
   186 00000322 C3                  <1>         ret 
   187                              <1> 
   188                              <1> ;-----------------ComplexUnitTest----------------
   189                              <1> ;
   190                              <1> ; Descr: tests different specifiers in one format
   191                              <1> ;        string
   192                              <1> ;
   193                              <1> ; Entry: none
   194                              <1> ;
   195                              <1> ; Exit : none 
   196                              <1> ;
   197                              <1> ; Destr:
   198                              <1> ;------------------------------------------------
   199                              <1> 
   200                              <1> ComplexUnitTest:
   201                              <1> 
   202 00000323 68AB250000          <1>         push 25ABh
   203 00000328 6A18                <1>         push 24d 
   204 0000032A 68B3000000          <1>         push 10110011b
   205 0000032F 68FFE80300          <1>         push 256255d
   206 00000334 6A21                <1>         push '!'
   207 00000336 68[11000000]        <1>         push StrArgument
   208 0000033B 68[0B010000]        <1>         push ComplexFormatStr
   209                              <1> 
   210 00000340 E8BBFCFFFF          <1>         call RsPrint
   211                              <1> 
   212 00000345 4883C438            <1>         add rsp, 56
   213                              <1> 
   214 00000349 C3                  <1>         ret 
   215                              <1> 
   216                              <1> ;================================================
   217                              <1> 
   218                              <1> section .data 
   219                              <1> 
   220                              <1> ;------------------------------------------------
   221                              <1> 
   222 00000018 54657374696E672025- <1> PercFormatStr:  db "Testing %%%% : %%", 0Ah, 0
   222 00000021 252525203A2025250A- <1>
   222 0000002A 00                  <1>
   223                              <1> 
   224                              <1> ;------------------------------------------------
   225                              <1> 
   226 0000002B 54657374696E672064- <1> DefFormatStr:   db "Testing default case: %a %1 %$", 0Ah, 0
   226 00000034 656661756C74206361- <1>
   226 0000003D 73653A202561202531- <1>
   226 00000046 2025240A00          <1>
   227                              <1> 
   228                              <1> ;------------------------------------------------
   229                              <1> 
   230 0000004B 54657374696E672025- <1> CharFormatStr:  db "Testing %%c: printing symbol ! -  %c", 0Ah, 0
   230 00000054 25633A207072696E74- <1>
   230 0000005D 696E672073796D626F- <1>
   230 00000066 6C2021202D20202563- <1>
   230 0000006F 0A00                <1>
   231                              <1> 
   232                              <1> ;------------------------------------------------
   233                              <1> 
   234 00000071 54657374696E672025- <1> StrFormatStr:   db "Testing %%s: string 'Rustam' - %s", 0Ah, 0
   234 0000007A 25733A20737472696E- <1>
   234 00000083 67202752757374616D- <1>
   234 0000008C 27202D2025730A00    <1>
   235                              <1> 
   236                              <1> ;------------------------------------------------
   237                              <1> 
   238 00000094 54657374696E672025- <1> BinFormatStr:   db "Testing %%b: number 1011011 - %b", 0Ah, 0
   238 0000009D 25623A206E756D6265- <1>
   238 000000A6 722031303131303131- <1>
   238 000000AF 202D2025620A00      <1>
   239                              <1> 
   240                              <1> ;------------------------------------------------
   241                              <1> 
   242 000000B6 54657374696E672025- <1> DecFormatStr:   db "Testing %%d: number 1256 - %d", 0Ah, 0
   242 000000BF 25643A206E756D6265- <1>
   242 000000C8 722031323536202D20- <1>
   242 000000D1 25640A00            <1>
   243                              <1> 
   244                              <1> ;------------------------------------------------
   245                              <1> 
   246 000000D5 54657374696E672025- <1> OctFormatStr:   db "Testing %%o: number 30 - %o", 0Ah, 0
   246 000000DE 256F3A206E756D6265- <1>
   246 000000E7 72203330202D20256F- <1>
   246 000000F0 0A00                <1>
   247                              <1> 
   248                              <1> ;------------------------------------------------
   249                              <1> 
   250 000000F2 54657374696E202525- <1> HexFormatStr:   db "Testin %%x: 25F25A - %x", 0Ah, 0
   250 000000FB 783A20323546323541- <1>
   250 00000104 202D2025780A00      <1>
   251                              <1> 
   252                              <1> ;------------------------------------------------
   253                              <1> 
   254                              <1> ComplexFormatStr:
   255 0000010B 537472696E673A2052- <1>                 db "String: Rustam - %s, char ! - %c, decimal 256255 - %d, binary 10110011 - %b, oct 30 - %o, hex 25AB - %x", 0Ah, 0
   255 00000114 757374616D202D2025- <1>
   255 0000011D 732C20636861722021- <1>
   255 00000126 202D2025632C206465- <1>
   255 0000012F 63696D616C20323536- <1>
   255 00000138 323535202D2025642C- <1>
   255 00000141 2062696E6172792031- <1>
   255 0000014A 30313130303131202D- <1>
   255 00000153 2025622C206F637420- <1>
   255 0000015C 3330202D20256F2C20- <1>
   255 00000165 686578203235414220- <1>
   255 0000016E 2D2025780A00        <1>
   256                              <1> 
   257                              <1> ;================================================
   258                              <1> 
   259                              <1> %endif 
   260                              <1> 
   261                              <1> 
   262                              <1> 
   263                              <1> 
   264                              <1> 
   265                              <1> 
   266                              <1> 
   267                              <1> 
   268                              <1> 
   269                              <1> 
    58                                                                          ; unit tests for 
    59                                                                          ; printf function
    60                                  
    61                                  ;================================================
    62                                  
    63                                  section .text 
    64                                  
    65                                  ;==================Main=Body=====================
    66                                  
    67                                  global _start
    68                                  
    69                                  _start:     
    70                                  
    71 0000034A E847FFFFFF                          call CharUnitTest
    72                                              .PAUSE
    72                              <1> 
    72 0000034F 90                  <1>  nop
    72 00000350 4831C0              <1>  xor rax, rax
    72                              <1> 
    72 00000353 BF00000000          <1>  mov rdi, 0
    72 00000358 48BE-               <1>  mov rsi, PauseBuf
    72 0000035A [0000000000000000]  <1>
    72                              <1> 
    72 00000362 BA01000000          <1>  mov rdx, 1
    72                              <1> 
    72 00000367 0F05                <1>  syscall
    72                              <1> 
    72 00000369 90                  <1>  nop
    73                                  
    74 0000036A E838FFFFFF                          call StrUnitTest
    75                                              .PAUSE
    75                              <1> 
    75 0000036F 90                  <1>  nop
    75 00000370 4831C0              <1>  xor rax, rax
    75                              <1> 
    75 00000373 BF00000000          <1>  mov rdi, 0
    75 00000378 48BE-               <1>  mov rsi, PauseBuf
    75 0000037A [0000000000000000]  <1>
    75                              <1> 
    75 00000382 BA01000000          <1>  mov rdx, 1
    75                              <1> 
    75 00000387 0F05                <1>  syscall
    75                              <1> 
    75 00000389 90                  <1>  nop
    76                                  
    77 0000038A E82CFFFFFF                          call DecUnitTest
    78                                              .PAUSE
    78                              <1> 
    78 0000038F 90                  <1>  nop
    78 00000390 4831C0              <1>  xor rax, rax
    78                              <1> 
    78 00000393 BF00000000          <1>  mov rdi, 0
    78 00000398 48BE-               <1>  mov rsi, PauseBuf
    78 0000039A [0000000000000000]  <1>
    78                              <1> 
    78 000003A2 BA01000000          <1>  mov rdx, 1
    78                              <1> 
    78 000003A7 0F05                <1>  syscall
    78                              <1> 
    78 000003A9 90                  <1>  nop
    79                                  
    80 000003AA E820FFFFFF                          call OctUnitTest
    81                                              .PAUSE
    81                              <1> 
    81 000003AF 90                  <1>  nop
    81 000003B0 4831C0              <1>  xor rax, rax
    81                              <1> 
    81 000003B3 BF00000000          <1>  mov rdi, 0
    81 000003B8 48BE-               <1>  mov rsi, PauseBuf
    81 000003BA [0000000000000000]  <1>
    81                              <1> 
    81 000003C2 BA01000000          <1>  mov rdx, 1
    81                              <1> 
    81 000003C7 0F05                <1>  syscall
    81                              <1> 
    81 000003C9 90                  <1>  nop
    82                                  
    83 000003CA E811FFFFFF                          call HexUnitTest
    84                                              .PAUSE
    84                              <1> 
    84 000003CF 90                  <1>  nop
    84 000003D0 4831C0              <1>  xor rax, rax
    84                              <1> 
    84 000003D3 BF00000000          <1>  mov rdi, 0
    84 000003D8 48BE-               <1>  mov rsi, PauseBuf
    84 000003DA [0000000000000000]  <1>
    84                              <1> 
    84 000003E2 BA01000000          <1>  mov rdx, 1
    84                              <1> 
    84 000003E7 0F05                <1>  syscall
    84                              <1> 
    84 000003E9 90                  <1>  nop
    85                                  
    86 000003EA E805FFFFFF                          call BinUnitTest
    87                                              .PAUSE
    87                              <1> 
    87 000003EF 90                  <1>  nop
    87 000003F0 4831C0              <1>  xor rax, rax
    87                              <1> 
    87 000003F3 BF00000000          <1>  mov rdi, 0
    87 000003F8 48BE-               <1>  mov rsi, PauseBuf
    87 000003FA [0000000000000000]  <1>
    87                              <1> 
    87 00000402 BA01000000          <1>  mov rdx, 1
    87                              <1> 
    87 00000407 0F05                <1>  syscall
    87                              <1> 
    87 00000409 90                  <1>  nop
    88                                  
    89 0000040A E8F6FEFFFF                          call PercUnitTest
    90                                              .PAUSE
    90                              <1> 
    90 0000040F 90                  <1>  nop
    90 00000410 4831C0              <1>  xor rax, rax
    90                              <1> 
    90 00000413 BF00000000          <1>  mov rdi, 0
    90 00000418 48BE-               <1>  mov rsi, PauseBuf
    90 0000041A [0000000000000000]  <1>
    90                              <1> 
    90 00000422 BA01000000          <1>  mov rdx, 1
    90                              <1> 
    90 00000427 0F05                <1>  syscall
    90                              <1> 
    90 00000429 90                  <1>  nop
    91                                  
    92 0000042A E8E5FEFFFF                          call DefUnitTest
    93                                              .PAUSE
    93                              <1> 
    93 0000042F 90                  <1>  nop
    93 00000430 4831C0              <1>  xor rax, rax
    93                              <1> 
    93 00000433 BF00000000          <1>  mov rdi, 0
    93 00000438 48BE-               <1>  mov rsi, PauseBuf
    93 0000043A [0000000000000000]  <1>
    93                              <1> 
    93 00000442 BA01000000          <1>  mov rdx, 1
    93                              <1> 
    93 00000447 0F05                <1>  syscall
    93                              <1> 
    93 00000449 90                  <1>  nop
    94                                  
    95 0000044A E8D4FEFFFF                          call ComplexUnitTest
    96                                              .PAUSE
    96                              <1> 
    96 0000044F 90                  <1>  nop
    96 00000450 4831C0              <1>  xor rax, rax
    96                              <1> 
    96 00000453 BF00000000          <1>  mov rdi, 0
    96 00000458 48BE-               <1>  mov rsi, PauseBuf
    96 0000045A [0000000000000000]  <1>
    96                              <1> 
    96 00000462 BA01000000          <1>  mov rdx, 1
    96                              <1> 
    96 00000467 0F05                <1>  syscall
    96                              <1> 
    96 00000469 90                  <1>  nop
    97                                  
    98                                              .EXIT
    98                              <1> 
    98 0000046A 4831FF              <1>  xor rdi, rdi
    98 0000046D B83C000000          <1>  mov rax, 03Ch
    98 00000472 0F05                <1>  syscall
    99                                  
   100                                  ;================================================
   101                                  
   102                                  section .data 
   103                                  
   104 00000174 48656C6C6F20576F72-     TestString:          db "Hello World",0Ah, 0
   104 0000017D 6C640A00           
   105                                  ;MainBuf:    times 64 db (1)
   106                                  
   107                                  
   108                                  
   109                                  
