     1                                  ;================================================
     2                                  ;                        (c) Rustam4ik, 2029 - 7
     3                                  ;================================================
     4                                  
     5                                  section .text 
     6                                  
     7                                  ;====================Macro=======================
     8                                  
     9                                  ;-------------------.EXIT------------------------
    10                                  
    11                                  %macro      .EXIT 0                 
    12                                                                          ; terminates programm
    13                                              xor rdi, rdi                ; exit code 0
    14                                              mov rax, 03Ch               ; exit
    15                                              syscall                 
    16                                  %endmacro
    17                                  
    18                                  ;------------------------------------------------
    19                                  
    20                                  ;-------------------.PAUSE-----------------------
    21                                  
    22                                  %macro      .PAUSE 0 
    23                                                                          ; getchar();
    24                                  		    nop
    25                                  		    xor rax, rax                ; read
    26                                  
    27                                  		    mov rdi, 0                  ; stdin - first arg
    28                                              mov rsi, PauseBuf
    29                                                                          ; char* buf - second arg
    30                                              mov rdx, 1                  ; read one byte
    31                                  
    32                                              syscall                     ; call read         
    33                                              
    34                                  		    nop
    35                                  %endmacro
    36                                  
    37                                  ;------------------------------------------------
    38                                  
    39                                  section .data 
    40                                  
    41 00000000 00                      PauseBuf    db 0                        ; reads one symb
    42                                  
    43                                  section .text
    44                                  
    45                                  ;------------------------------------------------
    46                                  
    47                                  ;==================Includes======================
    48                                  
    49                                  %include    "RsPrint.s"                      
     1                              <1> ;====================MACRO=======================
     2                              <1> 
     3                              <1> ;-----------------.PROLOGUE----------------------
     4                              <1> ;
     5                              <1> ; Descr: pushes arguments in stack in normal order
     6                              <1> ;
     7                              <1> ;------------------------------------------------
     8                              <1> 
     9                              <1> %macro  .PROLOGUE   1-*
    10                              <1>                                         ; 1 and more args
    11                              <1>     %rep %0
    12                              <1> 
    13                              <1>         push %1
    14                              <1>         %rotate 1
    15                              <1> 
    16                              <1>     %endrep
    17                              <1> 
    18                              <1> %endmacro
    19                              <1> 
    20                              <1> ;------------------.EPILOGUE---------------------
    21                              <1> ;
    22                              <1> ; Descr: popes arguments from stack in reversed order
    23                              <1> ;
    24                              <1> ;------------------------------------------------
    25                              <1> 
    26                              <1> %macro .EPILOGUE   1-*
    27                              <1> 
    28                              <1>     %rep %0
    29                              <1> 
    30                              <1>         %rotate -1
    31                              <1>         %pop %1
    32                              <1> 
    33                              <1>     %endrep
    34                              <1> 
    35                              <1> %endmacro
    36                              <1> 
    37                              <1> ;====================PRINTF======================
    38                              <1> 
    39                              <1> ; 'Printf' assembler function made for
    40                              <1> ;                         Linux x86_64
    41                              <1> ;
    42                              <1> ; File consists unit tests for functions
    43                              <1> ; Includes STRLIB library
    44                              <1> 
    45                              <1> ; %s - '0'-terminated string
    46                              <1> ; %c - symbol
    47                              <1> ; %d - decimal
    48                              <1> ; %x - hexidecimal
    49                              <1> ; %o - octagonal
    50                              <1> ; %b - binary
    51                              <1> 
    52                              <1> ;   b   c   d   o   s   x
    53                              <1> ;   2d  2d  3d  14d 18d 23d
    54                              <1> ;   62h 63h 64h 6Fh 73h 78h
    55                              <1> 
    56                              <1> ;================================================
    57                              <1> 
    58                              <1> %ifndef rsPrint
    59                              <1> %define rsPrint
    60                              <1> 
    61                              <1> ;================================================
    62                              <1> 
    63                              <1> section .text
    64                              <1> 
    65                              <1> ;==================FUNCTIONS=====================
    66                              <1> 
    67                              <1> ;-------------------RsPrint----------------------
    68                              <1> ;
    69                              <1> ; Descr: Prints string in terminal
    70                              <1> ; Entry: Gains arguments in stack (CDECL)
    71                              <1> ;        First arg  - format string
    72                              <1> ;        Next  args - arguments for format string
    73                              <1> ; Exit : None
    74                              <1> ; Desrt: a lot
    75                              <1> ;-------------------------------------------------
    76                              <1> 
    77                              <1> RsPrint:
    78 00000000 55                  <1>             push rbp
    79 00000001 4889E5              <1>             mov rbp, rsp                ; make stack frame
    80                              <1> 
    81 00000004 488B7510            <1>             mov rsi, [rbp + 16]         ; rbp -> start of format string
    82 00000008 4C8D6518            <1>             lea r12, [rbp + 24]         ; r12 -> first argument
    83                              <1> 
    84 0000000C 4831D2              <1>             xor rdx, rdx                ; counter of symbols
    85                              <1> 
    86 0000000F BF01000000          <1>             mov rdi, 01h                ; stdout
    87                              <1> 
    88                              <1>         .loop:
    89 00000014 803C1600            <1>             cmp byte [rsi + rdx], 0     ; if there EOL
    90 00000018 741F                <1>             je .fin
    91                              <1> 
    92 0000001A 803C1625            <1>             cmp byte [rsi + rdx], '%'   ; if there specifier
    93 0000001E 7405                <1>             je .write
    94                              <1> 
    95 00000020 48FFC2              <1>             inc rdx                     ; to next symbol
    96 00000023 EBEF                <1>             jmp .loop
    97                              <1> 
    98                              <1>         .write:
    99 00000025 4883FA00            <1>             cmp rdx, 0                  ; if counter == 0
   100 00000029 7407                <1>             je .arg                     ; no need to write
   101                              <1> 
   102 0000002B B801000000          <1>             mov rax, 01h                ; 'write' syscall code
   103 00000030 0F05                <1>             syscall                     ; else write
   104                              <1> 
   105                              <1>         .arg:
   106 00000032 E811000000          <1>             call RsPrintArg             ; print argument
   107 00000037 EBDB                <1>             jmp .loop
   108                              <1> 
   109                              <1>         .fin:
   110 00000039 4883FA00            <1>             cmp rdx, 0                  ; if counter == 0
   111 0000003D 7407                <1>             je .ret                     ; no need to write
   112                              <1> 
   113 0000003F B801000000          <1>             mov rax, 01h                ; 'write' syscall code
   114 00000044 0F05                <1>             syscall                     ; else write
   115                              <1> 
   116                              <1>         .ret:
   117 00000046 5D                  <1>             pop rbp                     ; restore rbp value
   118 00000047 C3                  <1>             ret
   119                              <1> 
   120                              <1> ;------------------RsPrintArg---------------------
   121                              <1> ;
   122                              <1> ; Descr: Prints in terminal argument in the way
   123                              <1> ;        according to specifier
   124                              <1> ;
   125                              <1> ; Entry: RSI + RDX -> %
   126                              <1> ;        R12 -> next arg to be printed
   127                              <1> ;        RAX == 1 (write)
   128                              <1> ;        RDI == 1 (stdout)
   129                              <1> ;
   130                              <1> ; Exit : RDX == 0
   131                              <1> ;        RSI -> next symb after specifier
   132                              <1> ;        R12 -> next argument in stack (+8)
   133                              <1> ;
   134                              <1> ; Destr: R8, R9, RAX
   135                              <1> ;------------------------------------------------
   136                              <1> 
   137                              <1> RsPrintArg:
   138 00000048 4801D6              <1>             add rsi, rdx                ; move rsi -> %
   139 0000004B 56                  <1>             push rsi                    ; save current pos in format string
   140                              <1> 
   141 0000004C 4C0FB64601          <1>             movzx r8, byte [rsi + 1]
   142                              <1>                                         ; get next symbol after '%'
   143                              <1> 
   144 00000051 4983F825            <1>             cmp r8, '%'
   145 00000055 7511                <1>             jne .nodblpercent           ; '%%' case
   146                              <1> 
   147 00000057 B801000000          <1>             mov rax, 01d                ; 'write' syscall
   148 0000005C BA01000000          <1>             mov rdx, 01d                ; print one symb
   149                              <1> 
   150 00000061 0F05                <1>             syscall                     ; 'write' one %
   151                              <1> 
   152 00000063 E90C010000          <1>             jmp .fin
   153                              <1> 
   154                              <1>         .nodblpercent:
   155 00000068 4983E862            <1>             sub r8, 'b'                 ; r8 = offset of the symbol
   156                              <1>                                         ; from 'b' in ASCII table
   157                              <1> 
   158 0000006C 4983F877            <1>             cmp r8, 'x' - 1             ; if specifier is not recognized
   159 00000070 0F87F2000000        <1>             ja .casedefault             ; print two symbol incuding '%'
   160                              <1> 
   161 00000076 4E8B04C5[81000000]  <1>             mov r8, [.jmptable + r8 * 8]
   162 0000007E 41FFE0              <1>             jmp r8                      ; else jmp using table
   163                              <1> 
   164                              <1>         .jmptable:
   165 00000081 [3901000000000000]  <1>             dq .binary                  ; %b
   166 00000089 [5A01000000000000]  <1>             dq .char                    ; %c
   167 00000091 [4E01000000000000]  <1>             dq .decimal                 ; %d
   168                              <1> 
   169 00000099 [6801000000000000]- <1>             times 'n' - 'd' dq .casedefault
   169 00000099 <rept>              <1>
   170                              <1> 
   171 000000E9 [4001000000000000]  <1>             dq .octagonal               ; %o
   172                              <1> 
   173 000000F1 [6801000000000000]- <1>             times 'r' - 'o' dq .casedefault
   173 000000F1 <rept>              <1>
   174                              <1> 
   175 00000109 [6101000000000000]  <1>             dq .string                  ; %s
   176                              <1> 
   177 00000111 [6801000000000000]- <1>             times 'w' - 's' dq .casedefault
   177 00000111 <rept>              <1>
   178                              <1> 
   179 00000131 [4701000000000000]  <1>             dq .hexadecimal             ; %x
   180                              <1> 
   181                              <1>         .binary:
   182 00000139 B901000000          <1>             mov rcx, 1
   183 0000013E EB13                <1>             jmp .casenum
   184                              <1> 
   185                              <1>         .octagonal:
   186 00000140 B903000000          <1>             mov rcx, 3
   187 00000145 EB0C                <1>             jmp .casenum
   188                              <1> 
   189                              <1>         .hexadecimal:
   190 00000147 B904000000          <1>             mov rcx, 4
   191 0000014C EB05                <1>             jmp .casenum
   192                              <1> 
   193                              <1>         .decimal:
   194 0000014E B90A000000          <1>             mov rcx, 10
   195                              <1>             
   196                              <1>         .casenum:
   197 00000153 E825000000          <1>             call RsPrintArgNum
   198 00000158 EB1A                <1>             jmp .fin 
   199                              <1> 
   200                              <1>         .char:
   201 0000015A E869000000          <1>             call RsPrintArgChar
   202 0000015F EB13                <1>             jmp .fin
   203                              <1> 
   204                              <1>         .string:
   205 00000161 E84A000000          <1>             call RsPrintArgStr
   206 00000166 EB0C                <1>             jmp .fin
   207                              <1> 
   208                              <1>         .casedefault:
   209 00000168 BA02000000          <1>             mov rdx, 2                  ; write "%%"
   210 0000016D B801000000          <1>             mov rax, 01d                ; 'write' syscall
   211 00000172 0F05                <1>             syscall
   212                              <1> 
   213                              <1>         .fin:
   214 00000174 4831D2              <1>             xor rdx, rdx                ; counter = 0
   215 00000177 5E                  <1>             pop rsi                     ; restore rsi value
   216 00000178 4883C602            <1>             add rsi, 2                  ; rsi -> next sym after specifier
   217                              <1> 
   218 0000017C C3                  <1>             ret
   219                              <1> 
   220                              <1> ;------------------RsPrintArgDec-----------------
   221                              <1> ;
   222                              <1> ; Descr: Prints number in decimal numeric system
   223                              <1> ;
   224                              <1> ; Entry: R12 -> arguments
   225                              <1> ;        RDI == 1 (stdout)
   226                              <1> ;        RCX == 10
   227                              <1> ;
   228                              <1> ; Exit : R12 -> next arguments (+8)
   229                              <1> ;
   230                              <1> ; Destr: RSI, RDX, RAX
   231                              <1> ;------------------------------------------------
   232                              <1> 
   233                              <1> ; RsPrintArgDec:
   234                              <1> ;             lea rsi, [PrintArgBuf]      ; buffer for string
   235                              <1> ;             mov rbx, [r12]              ; get argument value
   236                              <1> 
   237                              <1> ;             call RsItoa                 ; now R8 = number of symbols in string
   238                              <1> ;                                         ; rsi remains it value
   239                              <1> ;                                         ; rdi still equals 1
   240                              <1> 
   241                              <1> ;             call RsWriteStr             ; call 'write'
   242                              <1> 
   243                              <1> ;             add r12, 8                  ; r12 -> next argument
   244                              <1> 
   245                              <1> ;             ret
   246                              <1> 
   247                              <1> ;------------------RsPrintArg2n------------------
   248                              <1> ;
   249                              <1> ; Descr: Print argument in numeric system with
   250                              <1> ;        base, that is a power of 2 (2 ^n)
   251                              <1> ;
   252                              <1> ; Entry: RCX == n
   253                              <1> ;        R12 -> current argument
   254                              <1> ;        RDI == 1(stdout)
   255                              <1> ; Exit : R12 -> next argument (+8)
   256                              <1> ;
   257                              <1> ; Destr: RDX, RAX, RSI
   258                              <1> ;------------------------------------------------
   259                              <1> 
   260                              <1> ; RsPrintArg2n:
   261                              <1> ;             lea rsi, [PrintArgBuf]      ; buffer for string
   262                              <1> ;             mov rbx, [r12]              ; get argument value
   263                              <1> 
   264                              <1> ;             mov rdx, 1
   265                              <1> ;             shl rdx, cl
   266                              <1> ;             dec rdx                     ; rdx = 2^n - 1 (mask)
   267                              <1> 
   268                              <1> ;             call RsItoa2n               ; get string in buffer
   269                              <1> ;                                         ; rsi remains its value
   270                              <1> ;                                         ; rdi still equals 1
   271                              <1> 
   272                              <1> ;             call RsWriteStr             ; call 'write'
   273                              <1> 
   274                              <1> ;             add r12, 8                  ; r12 -> next argument
   275                              <1> 
   276                              <1> ;             ret
   277                              <1> 
   278                              <1> ;------------------RsPrintArgNum-----------------
   279                              <1> ;
   280                              <1> ; Descr: writes %d, %b, %o or %x argument
   281                              <1> ;
   282                              <1> ; Entry: RCX = 10 for %d of 1,3 and 4 for
   283                              <1> ;        %b, %o and %x
   284                              <1> ;
   285                              <1> ; Exit:  R12 -> next arg (+8)
   286                              <1> ;
   287                              <1> ; Destr: RSI, RAX, RDX
   288                              <1> ;------------------------------------------------
   289                              <1> 
   290                              <1> RsPrintArgNum:
   291 0000017D 488D3425[00000000]  <1>             lea rsi, [PrintArgBuf]      ; buffer for string
   292 00000185 498B1C24            <1>             mov rbx, [r12]              ; get argument value
   293                              <1> 
   294 00000189 4883F90A            <1>             cmp rcx, 10
   295 0000018D 7412                <1>             je .decimal                 ; jmp if  %d (rcx == 10 )
   296                              <1> 
   297 0000018F BA01000000          <1>             mov rdx, 1
   298 00000194 48D3E2              <1>             shl rdx, cl                 ; counting mask for Itoa2n
   299 00000197 48FFCA              <1>             dec rdx                     ; rdx = 2^n - 1 (mask)
   300                              <1> 
   301 0000019A E890000000          <1>             call RsItoa2n               ; get string in buffer
   302                              <1>                                         ; rsi remains its value
   303                              <1>                                         ; rdi still equals 1
   304 0000019F EB05                <1>             jmp .writestr               ; jmp to write from buffer
   305                              <1> 
   306                              <1>         .decimal:
   307 000001A1 E84C000000          <1>             call RsItoa                 ; call Itoa for 10-numeric system
   308                              <1> 
   309                              <1>         .writestr:
   310 000001A6 E83C000000          <1>             call RsWriteStr             ; call 'write'
   311                              <1> 
   312 000001AB 4983C408            <1>             add r12, 8                  ; r12 -> next argument
   313                              <1> 
   314 000001AF C3                  <1>             ret
   315                              <1> 
   316                              <1> ;------------------RsPrintArgStr-----------------
   317                              <1> ;
   318                              <1> ; Descr: Writes string argument
   319                              <1> ;
   320                              <1> ; Entry: RDI == 1
   321                              <1> ;        R12 -> current arguments ( address of string)
   322                              <1> ;
   323                              <1> ; Exit : R12 -> next argument (+8)
   324                              <1> ;
   325                              <1> ; Destr: RDX, RAX, RSI
   326                              <1> ;------------------------------------------------
   327                              <1> 
   328                              <1> RsPrintArgStr:
   329 000001B0 498B3424            <1>             mov rsi, [r12]              ; rsi -> argument string
   330 000001B4 E8AE000000          <1>             call RsStrlen               ; rcx = lenght of string
   331                              <1> 
   332 000001B9 4889CA              <1>             mov rdx, rcx                ; rdx = number of symbols
   333 000001BC B801000000          <1>             mov rax, 01d                ; now: rax == 1, rdi == 1
   334                              <1> 
   335 000001C1 0F05                <1>             syscall                     ; call 'write'
   336                              <1> 
   337 000001C3 4983C408            <1>             add r12, 8                  ; r12 -> next arg
   338                              <1> 
   339 000001C7 C3                  <1>             ret
   340                              <1> 
   341                              <1> ;------------------RsPrintArgChar----------------
   342                              <1> ;
   343                              <1> ; Descr: Writes char argument in terminal
   344                              <1> ;
   345                              <1> ; Entry: RDI == 1
   346                              <1> ;        R12 -> current  argument
   347                              <1> ;
   348                              <1> ; Exit:  R12 -> next argument (+8)
   349                              <1> ;
   350                              <1> ; Destr: RDX, RAX, RSI
   351                              <1> ;------------------------------------------------
   352                              <1> 
   353                              <1> RsPrintArgChar:
   354 000001C8 41B801000000        <1>             mov r8, 01d                 ; one symbol
   355 000001CE 488D3425[00000000]  <1>             lea rsi, [PrintArgBuf]      ; buffer for argument
   356                              <1> 
   357 000001D6 498B1424            <1>             mov rdx, [r12]              ; get argument
   358 000001DA 488916              <1>             mov [rsi], rdx              ; store char in buffer
   359                              <1> 
   360 000001DD E805000000          <1>             call RsWriteStr             ; call 'write'
   361                              <1> 
   362 000001E2 4983C408            <1>             add r12, 8                  ; r12 -> next argument
   363                              <1> 
   364 000001E6 C3                  <1>             ret
   365                              <1> 
   366                              <1> 
   367                              <1> ;-------------------RsWriteStr-------------------
   368                              <1> ;
   369                              <1> ; Descr: writes particular number of symbols in
   370                              <1> ;        terminal using 'write' Linux system call
   371                              <1> ;
   372                              <1> ; Entry: R8 - number of synbols to be printed
   373                              <1> ;        RSI - start of the string
   374                              <1> ;        RDI == 1 (stdout)
   375                              <1> ;
   376                              <1> ; Exit:  none
   377                              <1> ;
   378                              <1> ; Destr: RDX, RAX
   379                              <1> ;------------------------------------------------
   380                              <1> 
   381                              <1> RsWriteStr:
   382 000001E7 4C89C2              <1>         mov rdx, r8                     ; rdx = number of symbols
   383 000001EA B801000000          <1>         mov rax, 01d                    ; 'write' syscall
   384                              <1> 
   385 000001EF 0F05                <1>         syscall                         ; call write
   386                              <1> 
   387 000001F1 C3                  <1>         ret
   388                              <1> 
   389                              <1> ;------------------------------------------------
   390                              <1> 
   391                              <1> [section .bss]
   392                              <1> 
   393 00000000 <res 00000040>      <1> PrintArgBuf: resb 64                 ; buffer used for itoa
   394                              <1> 
   395                              <1> __SECT__
   396                              <1> 
   397                              <1> ;================================================
   398                              <1> 
   399                              <1> %endif
    50                                                                          ; printf function
    51                                  %include    "RsItoa.s"           
     1                              <1> %ifndef rsItoa
     2                              <1> %define rsItoa 
     3                              <1> 
     4                              <1> ;================================================
     5                              <1> 
     6                              <1> section .text 
     7                              <1> 
     8                              <1> ;==================FUNCTIONS=====================
     9                              <1> 
    10                              <1> ;-------------------RsItoa-------------------------
    11                              <1> ;
    12                              <1> ; Descr: translates number to string of symbols
    13                              <1> ;
    14                              <1> ; Exit : RSI remains its value
    15                              <1> ;        R8 - number of symbols in string
    16                              <1> ;
    17                              <1> ; Entry: RSI - start of the string
    18                              <1> ;        RCX - base of numeric system 
    19                              <1> ;        RBX - number to be translated
    20                              <1> ;
    21                              <1> ; Destr: RAX, RDX, R15 
    22                              <1> ;------------------------------------------------
    23                              <1> 
    24                              <1> RsItoa:
    25 000001F2 4889D8              <1>         mov rax, rbx                    ; get value for
    26                              <1>                                         ; counting offset
    27 000001F5 41B801000000        <1>         mov r8, 1                       ; at least ine symb in string
    28                              <1> 
    29                              <1>     .CountOffset:
    30 000001FB 4831D2              <1>         xor rdx, rdx                    ; rdx:rax / op64 = rax, rdx = remainder 
    31 000001FE 48F7F1              <1>         div rcx                         ; div by base
    32                              <1> 
    33 00000201 4883F800            <1>         cmp rax, 0                      ; cmp result with 0
    34 00000205 7408                <1>         je .main                        ; if equal, jmp to main 
    35 00000207 49FFC0              <1>         inc r8                          ; increment addition counter
    36 0000020A 48FFC6              <1>         inc rsi                         ; move to next symbol
    37                              <1> 
    38 0000020D EBEC                <1>         jmp .CountOffset
    39                              <1> 
    40                              <1>     .main:
    41 0000020F 4889D8              <1>         mov rax, rbx                    ; get value again
    42 00000212 4989CF              <1>         mov r15, rcx                    ; r15 == base 
    43 00000215 4C89C1              <1>         mov rcx, r8                     ; get number of symbols
    44                              <1> 
    45                              <1>     .loop:
    46 00000218 4831D2              <1>         xor rdx, rdx                    ; for division
    47 0000021B 49F7F7              <1>         div r15                         ; divide by base 
    48                              <1> 
    49 0000021E 8A92[01000000]      <1>         mov dl, [rdx + XlatTable64]     ; converting symbol
    50                              <1> 
    51 00000224 8816                <1>         mov [rsi], dl                   ; place symbol in string
    52 00000226 48FFCE              <1>         dec rsi                         ; iterate to next one
    53                              <1> 
    54 00000229 E2ED                <1>         loop .loop                      ; repeat rcx times
    55                              <1> 
    56 0000022B 48FFC6              <1>         inc rsi                         ; di point to the start of string
    57 0000022E C3                  <1>         ret 
    58                              <1> 
    59                              <1> ;--------------------RsItoa2n--------------------
    60                              <1> ;
    61                              <1> ; Descr: optimized version of the itoa64, made for
    62                              <1> ;        numeric sytems with base - power of two
    63                              <1> ;
    64                              <1> ; Entry: RBX - number to be translated
    65                              <1> ;        RCX  - n
    66                              <1> ;        RDX - mask for division (2^n - 1)
    67                              <1> ;        RSI - start of the string
    68                              <1> ;
    69                              <1> ; Exit : RSI remains its value
    70                              <1> ;        R8 - number of symbols in string
    71                              <1> ;
    72                              <1> ; Destr: RAX, RBX
    73                              <1> ;------------------------------------------------
    74                              <1> 
    75                              <1> RsItoa2n:
    76                              <1> 
    77 0000022F 4889D8              <1>         mov rax, rbx                    ; get value for
    78                              <1>                                         ; counting offset
    79 00000232 41B801000000        <1>         mov r8, 1                       ; at least ine symb in string
    80                              <1> 
    81                              <1>     .CountOffset:
    82 00000238 48D3E8              <1>         shr rax, cl 
    83 0000023B 4883F800            <1>         cmp rax, 0
    84 0000023F 7408                <1>         je .loop 
    85                              <1> 
    86 00000241 49FFC0              <1>         inc r8                          ; increment addition counter
    87 00000244 48FFC6              <1>         inc rsi                         ; move to next symbol
    88                              <1> 
    89 00000247 EBEF                <1>         jmp .CountOffset
    90                              <1> 
    91                              <1>     .loop:
    92 00000249 4889D8              <1>         mov rax, rbx                    ; get value 
    93 0000024C 4821D0              <1>         and rax, rdx                    ; use mask
    94                              <1> 
    95 0000024F 8A80[01000000]      <1>         mov al, [rax + XlatTable64]     ; translate code
    96 00000255 8806                <1>         mov [rsi], al                   ; store in sting
    97 00000257 48FFCE              <1>         dec rsi                         ; iterate to next
    98                              <1> 
    99 0000025A 48D3EB              <1>         shr rbx, cl                   ; ax /= 2^base
   100                              <1> 
   101 0000025D 4883FB00            <1>         cmp rbx, 0                      
   102 00000261 75E6                <1>         jne .loop                       ; while (rax != 0)
   103                              <1> 
   104 00000263 48FFC6              <1>         inc rsi                         ; rdi -> start of the string
   105 00000266 C3                  <1>         ret 
   106                              <1> 
   107                              <1> ;------------------------------------------------
   108                              <1> 
   109                              <1> [section .data] 
   110                              <1> 
   111 00000001 303132333435363738- <1> XlatTable64 db "0123456789ABCDEF"       ; translation table
   111 0000000A 39414243444546      <1>
   112                              <1> 
   113                              <1> __SECT__
   114                              <1> 
   115                              <1> ;================================================
   116                              <1> 
   117                              <1> %endif
    52                                                                          ; itoa function
    53                                  
    54                                  %include    "RsStrlen.s"                     
     1                              <1> %ifndef rsStrlen
     2                              <1> %define rsStrlen 
     3                              <1> 
     4                              <1> ;================================================
     5                              <1> 
     6                              <1> section .text 
     7                              <1> 
     8                              <1> ;===================FUNCTIONS====================
     9                              <1> 
    10                              <1> ;--------------------Strlen----------------------
    11                              <1> ;
    12                              <1> ; Descr:   count lenght of the null-terimanted 
    13                              <1> ;                                       string
    14                              <1> ; Entry:   RSI - address of the string
    15                              <1> ;
    16                              <1> ; Exit:    RCX - lenght of the string
    17                              <1> ;          RSI remains its value
    18                              <1> ;
    19                              <1> ; Desrt:   none
    20                              <1> ;-------------------------------------------------
    21                              <1> 
    22                              <1> RsStrlen:    
    23 00000267 56                  <1>             push rsi                    ; save rsi value
    24                              <1> 
    25 00000268 4831C9              <1>             xor rcx, rcx
    26 0000026B 48F7D9              <1>             neg rcx                     ; rcx == 0xFFFFFFFFFFFFFFFF
    27                              <1>             
    28                              <1>         .loop:
    29 0000026E 803E00              <1>             cmp byte [rsi], 0
    30 00000271 7405                <1>             je .ret                     ; if ([rdi] == 0) stop
    31                              <1> 
    32 00000273 48FFC6              <1>             inc rsi                     ; iterate to next symb
    33 00000276 E2F6                <1>             loop .loop                  ; while ([di] != 0)
    34                              <1> 
    35                              <1>         .ret: 
    36 00000278 48F7D9              <1>             neg rcx      
    37                              <1> 
    38 0000027B 5E                  <1>             pop rsi                     ; restore rsi value 
    39                              <1> 
    40 0000027C C3                  <1>             ret 
    41                              <1> 
    42                              <1> ;================================================
    43                              <1> 
    44                              <1> %endif
    55                                                                          ; strlen function
    56                                  
    57                                  %include    "PrintUnitTests.s"                  
     1                              <1> %ifndef rsPrintUnitTests
     2                              <1> %define rsPrintUnitTests
     3                              <1> 
     4                              <1> ;================================================
     5                              <1> 
     6                              <1> section .text 
     7                              <1> 
     8                              <1> ;=================FUNCTIONS======================
     9                              <1> 
    10                              <1> ;----------------CharUnitTest--------------------
    11                              <1> ;
    12                              <1> ; Descr: tests '%c' specifier
    13                              <1> ;
    14                              <1> ; Entry: none
    15                              <1> ;
    16                              <1> ; Exit : none
    17                              <1> ;
    18                              <1> ; Destr: 
    19                              <1> ;------------------------------------------------
    20                              <1> 
    21                              <1> CharUnitTest:
    22                              <1> 
    23 0000027D 6A21                <1>         push '!'
    24 0000027F 68[4B000000]        <1>         push CharFormatStr              ; push arguments
    25                              <1> 
    26 00000284 E877FDFFFF          <1>         call RsPrint
    27                              <1> 
    28 00000289 4883C410            <1>         add rsp, 16                     
    29                              <1> 
    30 0000028D C3                  <1>         ret 
    31                              <1> 
    32                              <1> ;-----------------StrUnitTest--------------------
    33                              <1> ;
    34                              <1> ; Descr: tests '%s' specifier
    35                              <1> ;
    36                              <1> ; Entry: none
    37                              <1> ;
    38                              <1> ; Exit : none
    39                              <1> ;
    40                              <1> ; Destr:
    41                              <1> ;------------------------------------------------
    42                              <1> 
    43                              <1> StrUnitTest:
    44                              <1> 
    45 0000028E 68[11000000]        <1>         push StrArgument
    46 00000293 68[71000000]        <1>         push StrFormatStr
    47                              <1> 
    48 00000298 E863FDFFFF          <1>         call RsPrint
    49                              <1> 
    50 0000029D 4883C410            <1>         add rsp, 16
    51                              <1> 
    52 000002A1 C3                  <1>         ret 
    53                              <1> 
    54                              <1> [section .data] 
    55 00000011 52757374616D00      <1> StrArgument db "Rustam", 0
    56                              <1> __SECT__ 
    57                              <1> 
    58                              <1> ;-----------------DecUnitTest--------------------
    59                              <1> ;
    60                              <1> ; Descr: tests '%d' specifier
    61                              <1> ;
    62                              <1> ; Entry: none
    63                              <1> ;
    64                              <1> ; Exit : none
    65                              <1> ;
    66                              <1> ; Destr:
    67                              <1> ;------------------------------------------------
    68                              <1> 
    69                              <1> DecUnitTest:
    70                              <1> 
    71 000002A2 68E8040000          <1>         push 1256d
    72 000002A7 68[B6000000]        <1>         push DecFormatStr
    73                              <1> 
    74 000002AC E84FFDFFFF          <1>         call RsPrint
    75                              <1> 
    76 000002B1 4883C410            <1>         add rsp, 16 
    77                              <1> 
    78 000002B5 C3                  <1>         ret 
    79                              <1> 
    80                              <1> ;-----------------OctUnitTest--------------------
    81                              <1> ;
    82                              <1> ; Descr: tests '%o' specifier
    83                              <1> ;
    84                              <1> ; Entry: none
    85                              <1> ;
    86                              <1> ; Exit : none
    87                              <1> ;
    88                              <1> ; Destr:
    89                              <1> ;------------------------------------------------
    90                              <1> 
    91                              <1> OctUnitTest:
    92                              <1> 
    93 000002B6 6A18                <1>         push 24d
    94 000002B8 68[D5000000]        <1>         push OctFormatStr
    95                              <1> 
    96 000002BD E83EFDFFFF          <1>         call RsPrint
    97                              <1> 
    98 000002C2 4883C410            <1>         add rsp, 16
    99                              <1>         
   100 000002C6 C3                  <1>         ret
   101                              <1> ;-----------------HexUnitTest--------------------
   102                              <1> ;
   103                              <1> ; Descr: tests '%x' specifier
   104                              <1> ;
   105                              <1> ; Entry: none
   106                              <1> ;
   107                              <1> ; Exit : none
   108                              <1> ;
   109                              <1> ; Destr:
   110                              <1> ;------------------------------------------------
   111                              <1> 
   112                              <1> HexUnitTest:
   113                              <1> 
   114 000002C7 685AF22500          <1>         push 25f25Ah
   115 000002CC 68[F2000000]        <1>         push HexFormatStr
   116                              <1>         
   117 000002D1 E82AFDFFFF          <1>         call RsPrint
   118                              <1> 
   119 000002D6 4883C410            <1>         add rsp, 16
   120                              <1> 
   121 000002DA C3                  <1>         ret 
   122                              <1> ;-----------------BinUnitTest--------------------
   123                              <1> ;
   124                              <1> ; Descr: tests '%b' specifier
   125                              <1> ;
   126                              <1> ; Entry: none
   127                              <1> ;
   128                              <1> ; Exit : none
   129                              <1> ;
   130                              <1> ; Destr:
   131                              <1> ;------------------------------------------------
   132                              <1> 
   133                              <1> BinUnitTest:
   134                              <1> 
   135 000002DB 6A5B                <1>         push 1011011b
   136 000002DD 68[94000000]        <1>         push BinFormatStr
   137                              <1> 
   138 000002E2 E819FDFFFF          <1>         call RsPrint
   139                              <1> 
   140 000002E7 4883C410            <1>         add rsp, 16
   141                              <1> 
   142 000002EB C3                  <1>         ret 
   143                              <1> 
   144                              <1> ;-----------------PercUnitTest-------------------
   145                              <1> ;
   146                              <1> ; Descr: tests '%%' specifier
   147                              <1> ;
   148                              <1> ; Entry: none
   149                              <1> ;
   150                              <1> ; Exit : none 
   151                              <1> ;
   152                              <1> ; Destr:
   153                              <1> ;------------------------------------------------
   154                              <1> 
   155                              <1> PercUnitTest:
   156                              <1> 
   157 000002EC 68[18000000]        <1>         push PercFormatStr
   158                              <1> 
   159 000002F1 E80AFDFFFF          <1>         call RsPrint
   160                              <1> 
   161 000002F6 4883C408            <1>         add rsp, 8
   162                              <1> 
   163 000002FA C3                  <1>         ret 
   164                              <1> 
   165                              <1> ;-----------------DefUnitTest--------------------
   166                              <1> ;
   167                              <1> ; Descr: tests default case ( %f, %1 and etc)
   168                              <1> ;
   169                              <1> ; Entry: none
   170                              <1> ;
   171                              <1> ; Exit : none 
   172                              <1> ;
   173                              <1> ; Destr:
   174                              <1> ;------------------------------------------------
   175                              <1> 
   176                              <1> DefUnitTest:
   177                              <1> 
   178 000002FB 68[2B000000]        <1>         push DefFormatStr
   179                              <1> 
   180 00000300 E8FBFCFFFF          <1>         call RsPrint
   181                              <1> 
   182 00000305 6683C408            <1>         add sp, 8
   183                              <1> 
   184 00000309 C3                  <1>         ret 
   185                              <1> 
   186                              <1> ;-----------------ComplexUnitTest----------------
   187                              <1> ;
   188                              <1> ; Descr: tests different specifiers in one format
   189                              <1> ;        string
   190                              <1> ;
   191                              <1> ; Entry: none
   192                              <1> ;
   193                              <1> ; Exit : none 
   194                              <1> ;
   195                              <1> ; Destr:
   196                              <1> ;------------------------------------------------
   197                              <1> 
   198                              <1> ComplexUnitTest:
   199                              <1> 
   200 0000030A 68AB250000          <1>         push 25ABh
   201 0000030F 6A18                <1>         push 24d 
   202 00000311 68B3000000          <1>         push 10110011b
   203 00000316 68FFE80300          <1>         push 256255d
   204 0000031B 6A21                <1>         push '!'
   205 0000031D 68[11000000]        <1>         push StrArgument
   206 00000322 68[0B010000]        <1>         push ComplexFormatStr
   207                              <1> 
   208 00000327 E8D4FCFFFF          <1>         call RsPrint
   209                              <1> 
   210 0000032C 4883C438            <1>         add rsp, 56
   211                              <1> 
   212 00000330 C3                  <1>         ret 
   213                              <1> 
   214                              <1> ;================================================
   215                              <1> 
   216                              <1> [section .data] 
   217                              <1> 
   218                              <1> ;------------------------------------------------
   219                              <1> 
   220 00000018 54657374696E672025- <1> PercFormatStr:  db "Testing %%%% : %%", 0Ah, 0
   220 00000021 252525203A2025250A- <1>
   220 0000002A 00                  <1>
   221                              <1> 
   222                              <1> ;------------------------------------------------
   223                              <1> 
   224 0000002B 54657374696E672064- <1> DefFormatStr:   db "Testing default case: %a %1 %$", 0Ah, 0
   224 00000034 656661756C74206361- <1>
   224 0000003D 73653A202561202531- <1>
   224 00000046 2025240A00          <1>
   225                              <1> 
   226                              <1> ;------------------------------------------------
   227                              <1> 
   228 0000004B 54657374696E672025- <1> CharFormatStr:  db "Testing %%c: printing symbol ! -  %c", 0Ah, 0
   228 00000054 25633A207072696E74- <1>
   228 0000005D 696E672073796D626F- <1>
   228 00000066 6C2021202D20202563- <1>
   228 0000006F 0A00                <1>
   229                              <1> 
   230                              <1> ;------------------------------------------------
   231                              <1> 
   232 00000071 54657374696E672025- <1> StrFormatStr:   db "Testing %%s: string 'Rustam' - %s", 0Ah, 0
   232 0000007A 25733A20737472696E- <1>
   232 00000083 67202752757374616D- <1>
   232 0000008C 27202D2025730A00    <1>
   233                              <1> 
   234                              <1> ;------------------------------------------------
   235                              <1> 
   236 00000094 54657374696E672025- <1> BinFormatStr:   db "Testing %%b: number 1011011 - %b", 0Ah, 0
   236 0000009D 25623A206E756D6265- <1>
   236 000000A6 722031303131303131- <1>
   236 000000AF 202D2025620A00      <1>
   237                              <1> 
   238                              <1> ;------------------------------------------------
   239                              <1> 
   240 000000B6 54657374696E672025- <1> DecFormatStr:   db "Testing %%d: number 1256 - %d", 0Ah, 0
   240 000000BF 25643A206E756D6265- <1>
   240 000000C8 722031323536202D20- <1>
   240 000000D1 25640A00            <1>
   241                              <1> 
   242                              <1> ;------------------------------------------------
   243                              <1> 
   244 000000D5 54657374696E672025- <1> OctFormatStr:   db "Testing %%o: number 30 - %o", 0Ah, 0
   244 000000DE 256F3A206E756D6265- <1>
   244 000000E7 72203330202D20256F- <1>
   244 000000F0 0A00                <1>
   245                              <1> 
   246                              <1> ;------------------------------------------------
   247                              <1> 
   248 000000F2 54657374696E202525- <1> HexFormatStr:   db "Testin %%x: 25F25A - %x", 0Ah, 0
   248 000000FB 783A20323546323541- <1>
   248 00000104 202D2025780A00      <1>
   249                              <1> 
   250                              <1> ;------------------------------------------------
   251                              <1> 
   252                              <1> ComplexFormatStr:
   253 0000010B 537472696E673A2052- <1>                 db "String: Rustam - %s, char ! - %c, decimal 256255 - %d, binary 10110011 - %b, oct 30 - %o, hex 25AB - %x", 0Ah, 0
   253 00000114 757374616D202D2025- <1>
   253 0000011D 732C20636861722021- <1>
   253 00000126 202D2025632C206465- <1>
   253 0000012F 63696D616C20323536- <1>
   253 00000138 323535202D2025642C- <1>
   253 00000141 2062696E6172792031- <1>
   253 0000014A 30313130303131202D- <1>
   253 00000153 2025622C206F637420- <1>
   253 0000015C 3330202D20256F2C20- <1>
   253 00000165 686578203235414220- <1>
   253 0000016E 2D2025780A00        <1>
   254                              <1> 
   255                              <1> __SECT__
   256                              <1> 
   257                              <1> ;================================================
   258                              <1> 
   259                              <1> %endif 
   260                              <1> 
   261                              <1> 
   262                              <1> 
   263                              <1> 
   264                              <1> 
   265                              <1> 
   266                              <1> 
   267                              <1> 
   268                              <1> 
   269                              <1> 
    58                                                                          ; unit tests for 
    59                                                                          ; printf function
    60                                  
    61                                  ;================================================
    62                                  
    63                                  section .text 
    64                                  
    65                                  ;==================Main=Body=====================
    66                                  
    67                                  global _start
    68                                  
    69                                  _start:     
    70                                  
    71 00000331 E847FFFFFF                          call CharUnitTest
    72                                              .PAUSE
    72                              <1> 
    72 00000336 90                  <1>  nop
    72 00000337 4831C0              <1>  xor rax, rax
    72                              <1> 
    72 0000033A BF00000000          <1>  mov rdi, 0
    72 0000033F 48BE-               <1>  mov rsi, PauseBuf
    72 00000341 [0000000000000000]  <1>
    72                              <1> 
    72 00000349 BA01000000          <1>  mov rdx, 1
    72                              <1> 
    72 0000034E 0F05                <1>  syscall
    72                              <1> 
    72 00000350 90                  <1>  nop
    73                                  
    74 00000351 E838FFFFFF                          call StrUnitTest
    75                                              .PAUSE
    75                              <1> 
    75 00000356 90                  <1>  nop
    75 00000357 4831C0              <1>  xor rax, rax
    75                              <1> 
    75 0000035A BF00000000          <1>  mov rdi, 0
    75 0000035F 48BE-               <1>  mov rsi, PauseBuf
    75 00000361 [0000000000000000]  <1>
    75                              <1> 
    75 00000369 BA01000000          <1>  mov rdx, 1
    75                              <1> 
    75 0000036E 0F05                <1>  syscall
    75                              <1> 
    75 00000370 90                  <1>  nop
    76                                  
    77 00000371 E82CFFFFFF                          call DecUnitTest
    78                                              .PAUSE
    78                              <1> 
    78 00000376 90                  <1>  nop
    78 00000377 4831C0              <1>  xor rax, rax
    78                              <1> 
    78 0000037A BF00000000          <1>  mov rdi, 0
    78 0000037F 48BE-               <1>  mov rsi, PauseBuf
    78 00000381 [0000000000000000]  <1>
    78                              <1> 
    78 00000389 BA01000000          <1>  mov rdx, 1
    78                              <1> 
    78 0000038E 0F05                <1>  syscall
    78                              <1> 
    78 00000390 90                  <1>  nop
    79                                  
    80 00000391 E820FFFFFF                          call OctUnitTest
    81                                              .PAUSE
    81                              <1> 
    81 00000396 90                  <1>  nop
    81 00000397 4831C0              <1>  xor rax, rax
    81                              <1> 
    81 0000039A BF00000000          <1>  mov rdi, 0
    81 0000039F 48BE-               <1>  mov rsi, PauseBuf
    81 000003A1 [0000000000000000]  <1>
    81                              <1> 
    81 000003A9 BA01000000          <1>  mov rdx, 1
    81                              <1> 
    81 000003AE 0F05                <1>  syscall
    81                              <1> 
    81 000003B0 90                  <1>  nop
    82                                  
    83 000003B1 E811FFFFFF                          call HexUnitTest
    84                                              .PAUSE
    84                              <1> 
    84 000003B6 90                  <1>  nop
    84 000003B7 4831C0              <1>  xor rax, rax
    84                              <1> 
    84 000003BA BF00000000          <1>  mov rdi, 0
    84 000003BF 48BE-               <1>  mov rsi, PauseBuf
    84 000003C1 [0000000000000000]  <1>
    84                              <1> 
    84 000003C9 BA01000000          <1>  mov rdx, 1
    84                              <1> 
    84 000003CE 0F05                <1>  syscall
    84                              <1> 
    84 000003D0 90                  <1>  nop
    85                                  
    86 000003D1 E805FFFFFF                          call BinUnitTest
    87                                              .PAUSE
    87                              <1> 
    87 000003D6 90                  <1>  nop
    87 000003D7 4831C0              <1>  xor rax, rax
    87                              <1> 
    87 000003DA BF00000000          <1>  mov rdi, 0
    87 000003DF 48BE-               <1>  mov rsi, PauseBuf
    87 000003E1 [0000000000000000]  <1>
    87                              <1> 
    87 000003E9 BA01000000          <1>  mov rdx, 1
    87                              <1> 
    87 000003EE 0F05                <1>  syscall
    87                              <1> 
    87 000003F0 90                  <1>  nop
    88                                  
    89 000003F1 E8F6FEFFFF                          call PercUnitTest
    90                                              .PAUSE
    90                              <1> 
    90 000003F6 90                  <1>  nop
    90 000003F7 4831C0              <1>  xor rax, rax
    90                              <1> 
    90 000003FA BF00000000          <1>  mov rdi, 0
    90 000003FF 48BE-               <1>  mov rsi, PauseBuf
    90 00000401 [0000000000000000]  <1>
    90                              <1> 
    90 00000409 BA01000000          <1>  mov rdx, 1
    90                              <1> 
    90 0000040E 0F05                <1>  syscall
    90                              <1> 
    90 00000410 90                  <1>  nop
    91                                  
    92 00000411 E8E5FEFFFF                          call DefUnitTest
    93                                              .PAUSE
    93                              <1> 
    93 00000416 90                  <1>  nop
    93 00000417 4831C0              <1>  xor rax, rax
    93                              <1> 
    93 0000041A BF00000000          <1>  mov rdi, 0
    93 0000041F 48BE-               <1>  mov rsi, PauseBuf
    93 00000421 [0000000000000000]  <1>
    93                              <1> 
    93 00000429 BA01000000          <1>  mov rdx, 1
    93                              <1> 
    93 0000042E 0F05                <1>  syscall
    93                              <1> 
    93 00000430 90                  <1>  nop
    94                                  
    95 00000431 E8D4FEFFFF                          call ComplexUnitTest
    96                                              .PAUSE
    96                              <1> 
    96 00000436 90                  <1>  nop
    96 00000437 4831C0              <1>  xor rax, rax
    96                              <1> 
    96 0000043A BF00000000          <1>  mov rdi, 0
    96 0000043F 48BE-               <1>  mov rsi, PauseBuf
    96 00000441 [0000000000000000]  <1>
    96                              <1> 
    96 00000449 BA01000000          <1>  mov rdx, 1
    96                              <1> 
    96 0000044E 0F05                <1>  syscall
    96                              <1> 
    96 00000450 90                  <1>  nop
    97                                  
    98                                              .EXIT
    98                              <1> 
    98 00000451 4831FF              <1>  xor rdi, rdi
    98 00000454 B83C000000          <1>  mov rax, 03Ch
    98 00000459 0F05                <1>  syscall
    99                                  
   100                                  ;================================================
   101                                  
   102                                  section .data 
   103                                  
   104 00000174 48656C6C6F20576F72-     TestString:          db "Hello World",0Ah, 0
   104 0000017D 6C640A00           
   105                                  ;MainBuf:    times 64 db (1)
   106                                  
   107                                  
   108                                  
   109                                  
