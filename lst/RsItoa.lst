     1                                  %ifndef rsItoa
     2                                  %define rsItoa 
     3                                  
     4                                  ;================================================
     5                                  
     6                                  global RsItoa, RsItoa2n
     7                                  
     8                                  ;================================================
     9                                  
    10                                  section .text 
    11                                  
    12                                  ;==================FUNCTIONS=====================
    13                                  
    14                                  ;-------------------RsItoa-------------------------
    15                                  ;
    16                                  ; Descr: translates number to string of symbols
    17                                  ;
    18                                  ; Exit : RSI remains its value
    19                                  ;        R8 - number of symbols in string
    20                                  ;
    21                                  ; Entry: RSI - start of the string
    22                                  ;        RCX - base of numeric system 
    23                                  ;        RBX - number to be translated
    24                                  ;
    25                                  ; Destr: RAX, RDX, R11
    26                                  ;------------------------------------------------
    27                                  
    28                                  RsItoa:
    29 00000000 4889D8                          mov rax, rbx                    ; get value for
    30                                                                          ; counting offset
    31 00000003 41B801000000                    mov r8, 1                       ; at least ine symb in string
    32                                  
    33                                      .CountOffset:
    34 00000009 4831D2                          xor rdx, rdx                    ; rdx:rax / op64 = rax, rdx = remainder 
    35 0000000C 48F7F1                          div rcx                         ; div by base
    36                                  
    37 0000000F 4883F800                        cmp rax, 0                      ; cmp result with 0
    38 00000013 7408                            je .main                        ; if equal, jmp to main 
    39 00000015 49FFC0                          inc r8                          ; increment addition counter
    40 00000018 48FFC6                          inc rsi                         ; move to next symbol
    41                                  
    42 0000001B EBEC                            jmp .CountOffset
    43                                  
    44                                      .main:
    45 0000001D 4889D8                          mov rax, rbx                    ; get value again
    46 00000020 4989CB                          mov r11, rcx                    ; r11 == base 
    47 00000023 4C89C1                          mov rcx, r8                     ; get number of symbols
    48                                  
    49                                      .loop:
    50 00000026 4831D2                          xor rdx, rdx                    ; for division
    51 00000029 49F7F3                          div r11                         ; divide by base 
    52                                  
    53 0000002C 8A92[00000000]                  mov dl, [rdx + XlatTable64]     ; converting symbol
    54                                  
    55 00000032 8816                            mov [rsi], dl                   ; place symbol in string
    56 00000034 48FFCE                          dec rsi                         ; iterate to next one
    57                                  
    58 00000037 E2ED                            loop .loop                      ; repeat rcx times
    59                                  
    60 00000039 48FFC6                          inc rsi                         ; di point to the start of string
    61 0000003C C3                              ret 
    62                                  
    63                                  ;--------------------RsItoa2n--------------------
    64                                  ;
    65                                  ; Descr: optimized version of the itoa64, made for
    66                                  ;        numeric sytems with base - power of two
    67                                  ;
    68                                  ; Entry: RBX - number to be translated
    69                                  ;        RCX  - n
    70                                  ;        RDX - mask for division (2^n - 1)
    71                                  ;        RSI - start of the string
    72                                  ;
    73                                  ; Exit : RSI remains its value
    74                                  ;        R8 - number of symbols in string
    75                                  ;
    76                                  ; Destr: RAX, RBX
    77                                  ;------------------------------------------------
    78                                  
    79                                  RsItoa2n:
    80                                  
    81 0000003D 4889D8                          mov rax, rbx                    ; get value for
    82                                                                          ; counting offset
    83 00000040 41B801000000                    mov r8, 1                       ; at least ine symb in string
    84                                  
    85                                      .CountOffset:
    86 00000046 48D3E8                          shr rax, cl 
    87 00000049 4883F800                        cmp rax, 0
    88 0000004D 7408                            je .loop 
    89                                  
    90 0000004F 49FFC0                          inc r8                          ; increment addition counter
    91 00000052 48FFC6                          inc rsi                         ; move to next symbol
    92                                  
    93 00000055 EBEF                            jmp .CountOffset
    94                                  
    95                                      .loop:
    96 00000057 4889D8                          mov rax, rbx                    ; get value 
    97 0000005A 4821D0                          and rax, rdx                    ; use mask
    98                                  
    99 0000005D 8A80[00000000]                  mov al, [rax + XlatTable64]     ; translate code
   100 00000063 8806                            mov [rsi], al                   ; store in sting
   101 00000065 48FFCE                          dec rsi                         ; iterate to next
   102                                  
   103 00000068 48D3EB                          shr rbx, cl                   ; ax /= 2^base
   104                                  
   105 0000006B 4883FB00                        cmp rbx, 0                      
   106 0000006F 75E6                            jne .loop                       ; while (rax != 0)
   107                                  
   108 00000071 48FFC6                          inc rsi                         ; rdi -> start of the string
   109 00000074 C3                              ret 
   110                                  
   111                                  ;------------------------------------------------
   112                                  
   113                                  [section .data] 
   114                                  
   115 00000000 303132333435363738-     XlatTable64 db "0123456789ABCDEF"       ; translation table
   115 00000009 39414243444546     
   116                                  
   117                                  __SECT__
   118                                  
   119                                  ;================================================
   120                                  
   121                                  %endif
